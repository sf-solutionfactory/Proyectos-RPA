ACTIVITY_TITLE__Callawebservice=Call a web service

ACTIVITY_MENU__Callawebservice=Call a Web Service

ACTIVITY_DESC__Callsawebservice.=Calls a web service.

ACTIVITY_NAME__Callwebservice=Call web service

ACTIVITY_CATEGORY__Webservice=Web service

PROP_NAME_ACTIVITY__SourceURL=Source URL

PROP_DESC_ACTIVITY__TheURLofthewebservicetobecalled.=The URL of the web service to be called.

PROP_DESC_ACTIVITY___Thisparameterisrequired.=\nThis parameter is required.

PROP_NAME_ACTIVITY__Inputdata=Input data

PROP_DESC_ACTIVITY__Theinputdataofthewebservice.=The input data of the web service.

PROP_NAME_ACTIVITY__Outputdata=Output data

PROP_DESC_ACTIVITY__Thevariabletostorewebserviceresult.=The variable used to store the web service result.

PROP_NAME_ACTIVITY__datacontenttype=Data content type

PROP_DESC_ACTIVITY__Thedatacontenttype.=The data content type.

PROP_NAME_ACTIVITY__webservicecallmethod=Web service call method

PROP_DESC_ACTIVITY__Thewebservicecallmethod.=The web service call method.

ACTIVITY_TITLE__CallSAPwebservice=Call SAP web service

ACTIVITY_MENU__CallSAPwebservice=Call SAP web service

ACTIVITY_DESC__CallSAPwebservice.=Call a web service.

ACTIVITY_NAME__CallSAPwebservice=Call SAP web service

ACTIVITY_TITLE__Close'$app$'=Close '$app$'

ACTIVITY_MENU__Close'$app$'=Close '$app$'

ACTIVITY_DESC__Closesarunningapplication.=Closes a running application.

ACTIVITY_NAME__Close=Close

ACTIVITY_CATEGORY__Application=Application

PROP_NAME_ACTIVITY__Application=Application

PROP_DESC_ACTIVITY__Thenameoftheapplicationtoclose.=The name of the application to close.

PROP_NAME_ACTIVITY__Waitclosing=Wait closing

PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthisapplicationisterminated.=If true (i.e. if the option is ticked), wait until this Application is terminated.

ACTIVITY_TITLE__Connectsession$session$to'$app$'=Connect session $session$ to '$app$'

ACTIVITY_MENU__Connectsession$session$to'$app$'=Connect session $session$ to '$app$'

ACTIVITY_DESC__ConnectsasessiontoHLLAPIapplication.=Connects a session to the HLLAPI application.

ACTIVITY_NAME__Connect=Connect

PROP_DESC_ACTIVITY__ThenameofapplicationtoconnectatHLLAPIsession.=The name of the application that the HLLAPI session is to be connected to.

PROP_NAME_ACTIVITY__Session=Session

PROP_DESC_ACTIVITY__Thesessionidentifiertouseforconnexion.ThisonemusthavebeenpreviouslydeclaredinHLLAPIemulator.=The session identifier to use to make the connection. It must already have been declared in the HLLAPI emulator.

ACTIVITY_TITLE__Disconnectto'$app$'=Disconnect from '$app$'

ACTIVITY_MENU__Disconnectto'$app$'=Disconnect from '$app$'

ACTIVITY_DESC__DisconnectsaHLLAPIapplication.=Disconnects a HLLAPI application.

ACTIVITY_NAME__Disconnect=Disconnect

PROP_DESC_ACTIVITY__Thenameofapplicationtodisconnect.=The name of the application to disconnect.

ACTIVITY_TITLE__Highlightitemsof'$app$'=Highlight items of '$app$'

ACTIVITY_MENU__Highlightitemsof'$app$'=Highlight items of '$app$'

ACTIVITY_DESC__Highlightsalldetecteditemsinactivepagesofanapplication.=Highlights all detected items on an application's active pages.

ACTIVITY_NAME__Highlight=Highlight

PROP_DESC_ACTIVITY__Thenameofapplicationtouseforthisaction.=The name of the application to use for this action.

PROP_NAME_ACTIVITY__Duration=Duration

PROP_DESC_ACTIVITY__Thehighlightdurationofdetecteditemsinmilliseconds.If0(zero),itemsremainhighlighted.=The highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.

ACTIVITY_TITLE__Start'$app$'=Start '$app$'

ACTIVITY_MENU__Start'$app$'=Start '$app$'

ACTIVITY_DESC__Startsanapplication.=Starts an application.

ACTIVITY_NAME__Start=Start

PROP_DESC_ACTIVITY__Thenameofapplicationtostart.=The name of the application to start.

PROP_NAME_ACTIVITY__Filename=Filename

PROP_DESC_ACTIVITY__Thefullpathwheretheexecutablefileoftheapplicationtobeopenedcanbefound.Optional.=The full path to the executable file of the application to be opened. Optional.

PROP_NAME_ACTIVITY__Arguments=Arguments

PROP_DESC_ACTIVITY__Theparametersthatcanbepassedtotheapplicationatstartup.Optional.=The parameters that can be passed to the application at startup. Optional.

PROP_NAME_ACTIVITY__Waitstarting=Wait starting

PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntiltheapplicationisstarted.=If true (i.e. if the option is ticked), wait until the application is started.

ACTIVITY_TITLE__Declarecredential=Declare credential

ACTIVITY_MENU__Declarecredential=Declare credential

ACTIVITY_DESC__Declaresacredential=Declares a credential

ACTIVITY_NAME__Declare=Declare

ACTIVITY_CATEGORY__Credential=Credential

PROP_NAME_ACTIVITY__Credentialname=Credential name

PROP_NAME_ACTIVITY__Comment=Comment

PROP_NAME_ACTIVITY__cypheringkey(Mandatoryforserverstorage)=Encryption key (mandatory for server storage)

PROP_NAME_ACTIVITY__Local(false)orserver(true)storage=Local (false) or server (true) storage

ACTIVITY_TITLE__Getcredential=Get credential

ACTIVITY_MENU__Getcredential=Get credential

ACTIVITY_DESC__Retrievescredentialloginandpassword=Retrieves credential login and password

ACTIVITY_NAME__Get=Get

ACTIVITY_TITLE__Setcredential=Set credential

ACTIVITY_MENU__Setcredential=Set credential

ACTIVITY_DESC__Setscredentialloginandpassword=Sets credential login and password

ACTIVITY_NAME__Set=Set

ACTIVITY_TITLE__Notify'$event$'=Notify '$event$'

ACTIVITY_MENU__Notify'$event$'=Notify '$event$'

ACTIVITY_DESC__Sendsafunctionaleventtoitselforanotherapplicationorpage.=Sends a functional event to itself or to another application or page.

ACTIVITY_NAME__Notify=Notify

ACTIVITY_CATEGORY__Events=Events

PROP_NAME_ACTIVITY__Event=Event

PROP_DESC_ACTIVITY__Enteraneweventnameorselectanexistingoneinthelist.=Enter a new event name or select an existing one from the list.

PROP_NAME_ACTIVITY__Sender=Sender

PROP_DESC_ACTIVITY__Nameofapplicationorprocesswhichsendsthefunctionalevent.=Name of the application or process sending the functional Event.

PROP_NAME_ACTIVITY__Datasentwiththeevent.=Data sent with the event .

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tosenddatafromthecontext,__-'...'tosendconstantvalue(Ex_'OK'),__-...tosenduservariable(Ex_myData).__=This is an expression. Use: - $data$ to send data from the context,- '...' to send a constant value (example: 'OK'),- ... to send a user variable (example: myData).

ACTIVITY_TITLE__Waitfor'$event$'=Wait for '$event$'

ACTIVITY_MENU__Waitfor'$event$'=Wait for '$event$'

ACTIVITY_DESC__Setsaneventhandlertowaitforafunctionalevent.=Sets an event handler to wait for a functional event .

ACTIVITY_NAME__Waitfor=Wait for

PROP_DESC_ACTIVITY__Nameoffunctionaleventtowait.=Name of the functional event to wait for.

ACTIVITY_TITLE__AdvancedFSOmanipulation=Advanced FSO manipulation

ACTIVITY_MENU__AdvancedFSOmanipulation=Advanced FSO manipulation

ACTIVITYDESCIndicatesshortlyandclearlytheaimofthisadvancedmanipulationrequiredinfilesystemintitlefieldofthisactivity.DescribesindetailtheadvancedmanipulationoffilesandfolderswhichrequiredcustomcodebasedonFSOlibraryindescriptionfieldofthisactivity.Nor=In the title field of this activity, indicates shortly and clearly the aim of this advanced manipulation required in file system. In the description field, describes in detail the advanced manipulation of files and folders which required custom code based on FSO library. This activity does not generate any running code. It merely inserts an empty code block to be filled by the developer later (to realize the required actions in file system at this step). More advanced functions to manipulate files and folders are available in the FSO library.

ACTIVITY_NAME__AdvancedFSO=Advanced FSO

ACTIVITY_CATEGORY__File=File

PROP_NAME_ACTIVITY__Availablefunctions=Available functions

PROP_DESC_ACTIVITY__AllavailablefunctionstomanipulatefilesandfolderswithFSOlibrary.Forfurtherinformation,pleaseconsultthededicatedDokuwikipagecalled"FSO(FileSystemObject)library"(https_//contextor.eu/dokuwiki/doku.php?id_lib_utils_fso).=All available functions to manipulate files and folders using the FSO library.

ACTIVITY_TITLE__Deletefile=Delete file

ACTIVITY_MENU__Deletefile=Delete file

ACTIVITY_DESC__Permanentlyerasesafile.=Permanently erases a file.

ACTIVITY_NAME__Deletefile=Delete file

PROP_NAME_ACTIVITY__File=File

PROP_DESC_ACTIVITY__Fullpathnametofiletodelete.Thecharacter'\'mustbedoubled.Forexample_C_\\myFolder\\SubFolder\\myFile.ext=Full path to the file you wish to delete. Please use double '\' - for example: C:\\myFolder\\SubFolder\\myFile.ext.

ACTIVITY_TITLE__DownloadfilefromaremoteURL=Download file from a remote URL

ACTIVITY_MENU__DownloadfilefromaremoteURL=Download file from a remote URL

ACTIVITY_DESC__DownloadsafilefromawebornetworkURL.=Downloads a file from a web or network URL.

ACTIVITY_NAME__Downloadfile=Download file 

PROP_DESC_ACTIVITY__TheURLofthesourcefiletodownload.=The URL of the source file to download.

PROP_NAME_ACTIVITY__localpath=Local path

PROP_DESC_ACTIVITY__Thelocaldestinationfilename.=The local destination file name.

ACTIVITY_TITLE__ReadaCSVfile=Read a CSV file.

ACTIVITY_MENU__ReadaCSVfile=Read a CSV File

ACTIVITY_DESC__ReadsallentriesfromaspecifiedCSV(comma-separatedvalues)file.=Reads all entries from a specified CSV (comma-separated values) file.

ACTIVITY_NAME__ReadCSV=Read CSV

PROP_NAME_ACTIVITY__Sourcefile=Source file

PROP_DESC_ACTIVITY__Thenameofthesourcefiletoreadwithitsabsolutepath.=The name of the source file to read, along with its absolute path.

PROP_NAME_ACTIVITY__Encoding=Encoding

PROP_DESC_ACTIVITY__Theencodingtypeofsourcefile_UTF-8,UTF-16,ASCII,Binary.=The encoding type of the source file: UTF-8, UTF-16, ASCII, or binary.

PROP_NAME_ACTIVITY__Separator=Separator

PROP_DESC_ACTIVITY__Specifiesthecharacterusedasfieldseparatorinthesourcefile_'_',',',';',...=Specifies the character used to separate fields in the source file: '\t', ',', ';', and so on.

PROP_NAME_ACTIVITY__Targetdata=Target data

PROP_DESC_ACTIVITY__Thenameofthevariabletostorethereadingresult.=The name of the variable to store the reading result in.

ACTIVITY_TITLE__ReadaJSONfile=Read a JSON file

ACTIVITY_MENU__ReadaJSONfile=Read a JSON file

ACTIVITY_DESC__ReadsthecontentofaJSON(JavaScriptObjectNotation)file.=Reads the content of a JSON (JavaScript Object Notation) file.

ACTIVITY_NAME__ReadJSON=Read JSON

ACTIVITY_TITLE__Readatextfile=Read a text file

ACTIVITY_MENU__Readatextfile=Read a text file

ACTIVITY_DESC__Readsthecontentofatextfile.=Reads the content of a text file.

ACTIVITY_NAME__Readtext=Read text 

ACTIVITY_TITLE__ReadanXMLfile=Read an XML file

ACTIVITY_MENU__ReadanXMLfile=Read an XML file

ACTIVITY_DESC__ReadsthecontentofaXML(eXtensibleMarkupLanguage)file.=Reads the content of a XML (eXtensible Markup Language) file.

ACTIVITY_NAME__ReadXML=Read XML

ACTIVITY_TITLE__WriteaCSVfile=Write a CSV file

ACTIVITY_MENU__WriteaCSVfile=Write a CSV file

ACTIVITY_DESC__WritesaCSV(comma-separatedvalues)file.=Writes a CSV (comma-separated values) file.

ACTIVITY_NAME__WriteCSV=Write CSV

PROP_NAME_ACTIVITY__Sourcedata=Source data

PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinCSVfile.=The name of the variable which contains data to store in CSV file.

PROP_NAME_ACTIVITY__Targetfile=Target file

PROP_DESC_ACTIVITY__Thenameofthetargetfiletostoredatawithitsabsolutepathanditsextension.=The name of the target file to store data, along with its absolute path and its extension.

PROP_DESC_ACTIVITY__Specifiesthecharactertouseasfieldseparatorintargetfile_'_',',',';',...=Specifies the character used to separate fields in the source file: '\t', ',', ';', and so on.

PROP_DESC_ACTIVITY__Theencodingtypeoftargetfile_UTF-8,UTF-16,ASCII,Binary.=The encoding type of the source file: UTF-8, UTF-16, ASCII, or binary.

ACTIVITY_TITLE__WriteaJSONfile=Write a JSON file

ACTIVITY_MENU__WriteaJSONfile=Write a JSON file

ACTIVITY_DESC__WritesaJSON(JavaScriptObjectNotation)file.=Writes a JSON (JavaScript Object Notation) file.

ACTIVITY_NAME__WriteJSON=Write JSON

PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinJSON(JavaScriptObjectNotation)file.=The name of the variable containing data to store in a JSON (JavaScript Object Notation) file.

ACTIVITY_TITLE__Writeatextfile=Write a text file

ACTIVITY_MENU__Writeatextfile=Write a text file

ACTIVITY_DESC__Writesatextfile.=Writes a text file.

ACTIVITY_NAME__Writetext=Write text 

PROP_DESC_ACTIVITY__Thenameofthevariablewhichcontainsdatatostoreintextfile.=The name of the variable containing data to store in a text file.

ACTIVITY_TITLE__WriteanXMLfile=Write an XML file

ACTIVITY_MENU__WriteanXMLfile=Write an XML file

ACTIVITY_DESC__WritesaXML(eXtensibleMarkupLanguage)file.=Writes an XML (eXtensible Markup Language) file.

ACTIVITY_NAME__WriteXML=Write XML

PROP_DESC_ACTIVITY__ThenameofthevariablewhichcontainsdatatostoreinXML(eXtensibleMarkupLanguage)file.=The name of the variable containing data to store in an XML (eXtensible Markup Language) file.

PROP_NAME_ACTIVITY__Tabseparator=Tab separator

PROP_DESC_ACTIVITY__Specifiesthecharactertouseastabulationseparator_'','_','',...=Specifies the character to use as a tabulation separator: '', '\t', '  ', and so on.

PROP_DESC_ACTIVITY__Thecharacterencodingoftargetfile_UTF-8,UTF-16,ASCII,Binary.=The target file's character encoding: UTF-8, UTF-16, ASCII, or binary.

ACTIVITY_TITLE__Createfolder=Create folder

ACTIVITY_MENU__Createfolder=Create folder

ACTIVITYDESCCreatesanewemptyfolder.Thisactionisabletocreatemultiplelevelsofnewsub-folders,suchasC\\NewParentFolder\\SubFolder1\\SubFolder2,etc.Inotherwords,anentirenewfolderstructure(tree)canbecreatedwithasingleaction-eachfolderdoesnotneedtobecreated=Creates a new empty folder. This action can create multiple levels of new sub-folders, such as C:\\NewParentFolder\\SubFolder1\\SubFolder2, and so on. In other words, an entirely new folder structure (tree) can be created in a single action, so there is no need to create each folder separately.

ACTIVITY_NAME__Createfolder=Create folder

PROP_NAME_ACTIVITY__Folder=Folder

PROP_DESC_ACTIVITY__Thefullpathoffolderstructuretobecreated.Thecharacter'\'mustbedoubled.Forexample_C_\\NewFolder\\SubFolder1=The full path of the folder structure to be created. Please use double '\', for example C:\\NewFolder\\SubFolder1

ACTIVITY_TITLE__If(else)=If (else)

ACTIVITY_MENU__If(else)=If (else)

ACTIVITY_DESC__ExecutesablockofcodefollowinganIFactionthatevaluatedtofalse.=Executes a block of code following an IF action that evaluated to false.

ACTIVITY_NAME__If(else)=If (else)

ACTIVITY_CATEGORY__Flow-If=Flow - If

ACTIVITY_TITLE__If(end)=If (end)

ACTIVITY_MENU__If(end)=If (end)

ACTIVITY_DESC__Endblockforaif=End block for an if

ACTIVITY_NAME__If(end)=If (end)

ACTIVITY_CATEGORY__Flow=Flow

ACTIVITY_TITLE__If(start)=If (start)

ACTIVITY_MENU__If(start)=If (start)

ACTIVITY_DESC__Startblockforaif=Start block for an if

ACTIVITY_NAME__If(start)=If (start)

PROP_NAME_ACTIVITY__Item=Item

PROP_NAME_ACTIVITY__Condition=Condition

PROP_DESC_ACTIVITY__Include$item$inttheconditiontoperformtestontheItem___Ex_$item$.exist()__=Include $item$ in the condition to perform test on the item, for example: $item$.exist()

ACTIVITY_TITLE__If($expression$)=If ($expression$)

ACTIVITY_MENU__If($expression$)=If ($expression$)

ACTIVITY_DESC__Conditionallyexecutesablockofactions,ifthespecifiedcheckofanexpressionevaluatestoTRUE.=Conditionally executes a block of actions if the specified check of an expression evaluates to TRUE.

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$item$toperformtestonanitem(Ex_!$item$.exist())__-$data$toperformtestondatainthecontext(Ex_$data$__'')=This is an expression. Use: - $item$ to perform test on an item (example: !$item$.exist())- $data$ to perform test on data in the context (example: $data$ == '')

ACTIVITY_TITLE__LoopstotheStartblock=Loops to the start block

ACTIVITY_MENU__LoopstotheStartblock=Loops to the start block

ACTIVITY_DESC__LoopstotheStartblock.=Loops to the start block.

ACTIVITY_NAME__Loop=Loop

ACTIVITY_CATEGORY__Flow-Loop=Flow - Loop

ACTIVITY_TITLE__Startloop=Start loop

ACTIVITY_MENU__Startloop=Start loop

ACTIVITY_DESC__Startinginstructionforaloop.=Starting instruction for a loop.

ACTIVITY_TITLE__Exitloop=Exit loop

ACTIVITY_MENU__Exitloop=Exit loop

ACTIVITY_DESC__Testinstructiontoexitfromaloop.=Test instruction to exit from a loop.

ACTIVITY_NAME__Exit=Exit

PROP_NAME_ACTIVITY__Exitcondition=Exit condition

PROP_DESC_ACTIVITY__Include$item$inttheconditiontoperformtestontheItem___Ex_$item$exist()__=Include $item$ in the condition to perform test on the item, for example: $item$exist()

ACTIVITY_DESC__Testblocktoexitfromaloop.=Test block to exit from a loop.

PROP_DESC_ACTIVITY__Thisisan'expression'toevaluatetoexitornotfromloop.Use___-$item$toperformatestonanitem(Ex_!$item$.exist()),__-$data$toperformatestondatainthecontext(Ex_$data$__'').__=This is an expression to evaluate whether or not to exit from a loop. Use: - $item$ to perform a test on an item (example: !$item$.exist()),- $data$ to perform a test on data in the context (example: $data$ == '').

ACTIVITY_TITLE__Sequence=Sequence

ACTIVITY_MENU__Sequence=Sequence

ACTIVITY_DESC__Sequenceofactions.=Sequence of actions.

ACTIVITY_NAME__Sequence=Sequence

ACTIVITY_TITLE__Noendstep=No end step

ACTIVITY_MENU__Noendstep=No end step

ACTIVITY_DESC__Preventfromendingthecurrentstep=Prevent the current step from ending

ACTIVITY_NAME__NoendStep=No end step

ACTIVITY_TITLE__Output$value$=Output $value$

ACTIVITY_MENU__Output$value$=Output $value$

ACTIVITY_DESC__Outputvalue=Output value

ACTIVITY_NAME__Output=Output

PROP_NAME_ACTIVITY__Outputvalue=Output value

ACTIVITY_TITLE__Reuse$step$=Reuse $step$

ACTIVITY_MENU__Reuse$step$=Reuse $step$

ACTIVITY_DESC__Reusesteporsteps.=Reuse a step or steps.

ACTIVITY_NAME__Reusestep=Reuse step 

PROP_NAME_ACTIVITY__Steptoreuse=Step to reuse

ACTIVITY_TITLE__Wait(end)=Wait (end)

ACTIVITY_MENU__Wait(end)=Wait (end)

ACTIVITY_DESC__Endblockforawait=End block for a wait

ACTIVITY_NAME__Wait(end)=Wait (end)

ACTIVITY_TITLE__Addajob=Add a job

ACTIVITY_MENU__Addajob=Add a job

ACTIVITY_DESC__AddsajobinGalaxyserver.=Adds a job in Factory.

ACTIVITY_NAME__AddJob=Add job

ACTIVITY_CATEGORY__GalaxyAPI=Factory API

PROP_DESC_ACTIVITY__Thenameofapplicationwhichcontainsthescenariotoaddinjobmanager.=The name of the application containing the scenario to add in Job Manager.

PROP_NAME_ACTIVITY__Scenario=Scenario

PROP_DESC_ACTIVITY__Scenarioname=Scenario name

PROP_NAME_ACTIVITY__Jobdata=Job data

PROP_DESC_ACTIVITY__Datatouseforscenarioexecutionandwhichwillberelatedtothejob.=Data to use for scenario execution and that will be related to the Job.

PROP_NAME_ACTIVITY__Priority=Priority

PROP_DESC_ACTIVITY__Jobpriority=Job priority

PROP_NAME_ACTIVITY__Notification=Notification

PROP_DESC_ACTIVITY__Sendnotificationwhenjobisexecuted=Send notification when job is executed

ACTIVITY_TITLE__Addajoblist=Add a job list 

ACTIVITY_MENU__Addajoblist=Add a job list 

ACTIVITY_DESC__AddsajoblistinGalaxyserver.=Adds a job list in Factory.

ACTIVITY_NAME__AddJoblist=Add job list 

PROP_NAME_ACTIVITY__Joblist=Job list 

PROP_DESC_ACTIVITY__Joblisttobeadded=Job list to be added

ACTIVITY_TITLE__Getajob=Get a job 

ACTIVITY_MENU__Getajob=Get a job 

ACTIVITY_DESC__Getsajobinjobmanager.=Gets a job in Job Manager.

ACTIVITY_NAME__Getjob=Get job 

PROP_NAME_ACTIVITY__Criteria=Criteria

PROP_DESC_ACTIVITY__Thecriteriaforjobsearch.=The criteria for the job search.

ACTIVITY_TITLE__Getandrunajob=Get and run a job 

ACTIVITY_MENU__Getandrunajob=Get and run a job 

ACTIVITY_DESC__Gets,runsandupdatesajobinjobmanager.=Gets, runs and updates a job in Job Manager.

ACTIVITY_NAME__Get/runjob=Get/run job

ACTIVITY_TITLE__Getajoblist=Get a job list

ACTIVITY_MENU__Getajoblist=Get a job list

ACTIVITY_DESC__GetsajoblistinGalaxyserver.=Gets a job list in Factory.

ACTIVITY_NAME__GetJoblist=Get job list

PROP_NAME_ACTIVITY__Jobdatasource=Job data source

PROP_DESC_ACTIVITY__Jobdatasource=Job data source

PROP_NAME_ACTIVITY__Maxjobcount=Max job count

PROP_DESC_ACTIVITY__Maxjobcount=Max job count

ACTIVITY_TITLE__Check/uncheck$item$=Check / uncheck $item$

ACTIVITY_MENU__Check/uncheck$item$=Check / uncheck $item$

ACTIVITY_DESC__Check/uncheckanItem=Check / uncheck an item

ACTIVITY_NAME__Check/uncheck=Check / uncheck 

ACTIVITY_CATEGORY__Item-Set=Item - Set

PROP_DESC_ACTIVITY__Nameoftheitemtouseforthisaction.=Name of the item to use for this action.

PROP_NAME_ACTIVITY__Checkoruncheck=Check or uncheck 

ACTIVITY_TITLE__Get$item$in$data$=Get $item$ in $data$

ACTIVITY_MENU__Get$item$in$data$=Get $item$ in $data$

ACTIVITY_DESC__GetthecontentonanItem=Get the content of an item 

ACTIVITY_CATEGORY__Item-Get=Item - Get

PROP_NAME_ACTIVITY__Wheretostorevalue=Where to store value

PROP_NAME_ACTIVITY__Testitemexistence=Test item's existence

ACTIVITY_TITLE__Get'$item$'in$expression$=Get '$item$' in $expression$

ACTIVITY_MENU__Get'$item$'in$expression$=Get '$item$' in $expression$

ACTIVITY_DESC__GetthecontentonalistItem=Get the content of a list item

ACTIVITY_NAME__Getlist=Get list 

PROP_NAME_ACTIVITY__Wheretostoreresult=Where to store result

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tostoreintheContext(Ex_$data$+'+++')__-variablenametostoreinavariable(Ex_varmyVar)__-...__=This is an expression. Use: - $data$ to store in the context (example: $data$ + '+++')- variable name to store in a variable (example: var myVar)- ...

ACTIVITY_TITLE__Get'$item$'in'$expression$'=Get '$item$' in '$expression$'

ACTIVITY_MENU__Get'$item$'in'$expression$'=Get '$item$' in '$expression$'

ACTIVITY_DESC__Getsthecontentonanitem.=Gets the content of an item

PROP_NAME_ACTIVITY__Wheretostoreresult.=Where to store result

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tostoreinthecontext(Ex_$data$+'+++')__-variablenametostoreinavariable(Ex_varmyVar)__-...__=This is an expression. Use: - $data$ to store in the context (example: $data$ + '+++')- variable name to store in a variable (example: var myVar)- ...

ACTIVITY_TITLE__Gettable=Get table

ACTIVITY_MENU__Gettable=Get table

ACTIVITY_NAME__GetTable=Get table

PROP_NAME_ACTIVITY__Data=Data

PROP_DESC_ACTIVITY__Datatouseforthisaction.=Data to use for this action.

ACTIVITY_TITLE__Testif'$item$'isenabled=Test whether '$item$' is enabled

ACTIVITY_MENU__Testif'$item$'isenabled=Test whether '$item$' is enabled

ACTIVITY_DESC__Testifanitemisenabled.=Test whether an item is enabled.

ACTIVITY_NAME__Isenabled=Is enabled

PROP_NAME_ACTIVITY__Wheretostoretheresultofenabletest.=Where to store the result of enable test.

ACTIVITY_TITLE__Testif'$item$'isvisible=Test whether '$item$' is enabled

ACTIVITY_MENU__Testif'$item$'isvisible=Test whether '$item$' is enabled

ACTIVITY_DESC__Testifanitemisvisible.=Test whether an item is visible.

ACTIVITY_NAME__Isvisible=Is visible

PROP_NAME_ACTIVITY__Wheretostoretheresultofvisibilitytest.=Where to store the result of visibility test.

ACTIVITY_TITLE__Set$expression$in'$item$'(keystroke)=Set $expression$ in '$item$' (keystroke)

ACTIVITY_MENU__Set$expression$in'$item$'(keystroke)=Set $expression$ in '$item$' (keystroke)

ACTIVITY_DESC__SetsthecontentonanItem(keystroke).=Sets the content of an item (keystroke).

ACTIVITY_NAME__Keystroke=Keystroke

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$togetdatafromthecontext(Ex_$data$+e.key.F4)__-'...'tosetaconstantvalue(Ex_'myvalue')__-...__=This is an expression. Use: - $data$ to get data from the context (example: $data$ + e.key.F4)- '...' to set a constant value (example: 'my value')- ...

ACTIVITY_TITLE__Select$data$in'$item$'=Select $data$ in '$item$'

ACTIVITY_MENU__Select$data$in'$item$'=Select $data$ in '$item$'

ACTIVITY_DESC__Selectsavalueinthecontentoftheitem.=Selects a value in the content of the item.

ACTIVITY_NAME__Select=Select

PROP_DESC_ACTIVITY__Thenameoftheitemtouseforthisaction.=The name of the item to use for this action.

PROP_NAME_ACTIVITY__select(check)orunselect(uncheck)=Select (check) or deselect (uncheck)

PROP_NAME_ACTIVITY__Fromwheregetvalue=Where to get value from

ACTIVITY_TITLE__Selecttab($index$)=Select tab($index$)

ACTIVITY_MENU__Selecttab($index$)=Select tab($index$)

ACTIVITY_DESC__Selectsatabbyitsindex.=Selects a tab by its index.

ACTIVITY_NAME__Selecttab=Select tab

PROP_NAME_ACTIVITY__Tabposition=Tab position

PROP_DESC_ACTIVITY__Toselectatabbyitsindex(withnumberingstartstozero)___-Indicateaninteger(forexample_3);__-Useavariablebyusing_..._(ex__myVariable_).=To select a tab by its index (with numbering starting from zero):- Indicate an integer (example: 3);- Use a variable by using _..._ (example: _myVariable_).

ACTIVITY_TITLE__Set$data$in$item$=Set $data$ in $item$

ACTIVITY_MENU__Set$data$in$item$=Set $data$ in $item$

ACTIVITY_DESC__SetItemcontent=Set item's content

PROP_DESC_ACTIVITY__Youcan___-Selectorcreateanentryinthecontext__-Useaconstantvaluebyusing'...'(ex_'123')__-Useavariablebyusing_..._(ex__myVariable_)=You can:- Select or create an entry in the context- Use a constant value by using '...' (example: '123')- Use a variable by using _..._ (example: _myVariable_)

ACTIVITY_TITLE__Setfocuson'$item$'=Set focus on '$item$'

ACTIVITY_MENU__Setfocuson'$item$'=Set focus on '$item$'

ACTIVITY_DESC__Setsthefocusonanitem.=Sets the focus on an item.

ACTIVITY_NAME__Setfocus=Set focus

PROP_DESC_ACTIVITY__Nameoftheitemtofocus.=Name of the item to set focus on.

ACTIVITY_TITLE__Set$expression$in'$item$'=Set $expression$ in '$item$'

ACTIVITY_MENU__Set$expression$in'$item$'=Set $expression$ in '$item$'

ACTIVITY_DESC__Setthecontentofanitem.=Set the content of an item.

PROP_DESC_ACTIVITY__Nameoftheitemtofillwithdata.=Name of the item to fill with data.

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$togetdatafromtheContext(Ex_$data$+'+++')__-'...'tosetaconstantvalue(Ex_'myvalue')__-...__=This is an expression. Use: - $data$ to get data from the context (example: $data$ + e.key.F4)- '...' to set a constant value (example: 'my value')- ...

ACTIVITY_TITLE__Setdatainatable=Set data in a table

ACTIVITY_MENU__Setdatainatable=Set data in a table

ACTIVITY_DESC__Setsthecontentonanitem.=Sets the content of an item.

ACTIVITY_NAME__SetTable=Set table

ACTIVITY_TITLE__Clickon'$item$'=Click on '$item$'

ACTIVITY_MENU__Clickon'$item$'=Click on '$item$'

ACTIVITY_DESC__Clicksonanitem.=Clicks on an item.

ACTIVITY_NAME__Click=Click

ACTIVITY_CATEGORY__Item-Click=Item - Click

PROP_DESC_ACTIVITY__Nameofitemtouseforthisaction.=Name of item to use for this action.

ACTIVITY_TITLE__Click(mouse)on'$item$'=Click (mouse) on '$item$'

ACTIVITY_MENU__Click(mouse)on'$item$'=Click (mouse) on '$item$'

ACTIVITY_DESC__Simulatesamouseclickonanitem.=Simulates a mouse-click on an item.

ACTIVITY_NAME__Mouseclick=Mouse-click

PROP_NAME_ACTIVITY__Xcoordinate=X-coordinate

PROP_DESC_ACTIVITY__Horizontalposition(relativetoItemtopleftposition).=Horizontal position (relative to item's top left position).

PROP_NAME_ACTIVITY__Ycoordinate=Y-coordinate

PROP_DESC_ACTIVITY__Verticalposition(relativetoItemtopleftposition).=Vertical position (relative to item's top left position).

ACTIVITY_TITLE__Double-clickon'$item$'=Double-click on '$item$'

ACTIVITY_MENU__Double-clickon'$item$'=Double-click on '$item$'

ACTIVITY_DESC__Double-clicksonanitem.=Double-clicks on an item.

ACTIVITY_NAME__Doubleclick=Double-click

PROP_DESC_ACTIVITY__Horizontalposition(relativetoitemtopleftposition).__Optional,ifomitted,thecenteroftheitemisused.=Horizontal position (relative to item\u2019s top left position). Optional. If omitted, the center of the item is used.

PROP_DESC_ACTIVITY__Verticalposition(relativetoitemtopleftposition).=Vertical position (relative to item's top left position).

ACTIVITY_TITLE__Right-clickon'$item$'=Right-click on '$item$'

ACTIVITY_MENU__Right-clickon'$item$'=Right-click on '$item$'

ACTIVITY_DESC__Right-clicksonanitem.=Right-clicks on an item.

ACTIVITY_NAME__Rightclick=Right-click

PROP_NAME_ACTIVITY__Mouseclick=Mouse-click

PROP_DESC_ACTIVITY__Ifchecked,theactionsimulatesa'mouse'click.=If checked, the action simulates a mouse-click.

PROP_DESC_ACTIVITY__Horizontalposition(relativetoitemtopleftposition).=Horizontal position (relative to item's top left position).

ACTIVITY_TITLE__Waituntil'$item$'changes=Wait until '$item$' changes

ACTIVITY_MENU__Waituntil'$item$'changes=Wait until '$item$' changes

ACTIVITY_DESC__Waitsuntilanitemcontentchanges.=Waits until an item's content changes.

ACTIVITY_NAME__Waitchange=Wait change

ACTIVITY_CATEGORY__Item-Wait=Item - Wait

ACTIVITY_TITLE__Waituntiluserclickson'$item$'=Wait until user clicks on '$item$'

ACTIVITY_MENU__Waituntiluserclickson'$item$'=Wait until user clicks on '$item$'

ACTIVITY_DESC__Waitsuntiltheenduserclicksonanitem.=Waits until the end user clicks on an item.

ACTIVITY_NAME__Waitclick=Wait click

ACTIVITY_TITLE__WaitforCLICKeventon'$item$'=Wait for click event on '$item$'

ACTIVITY_MENU__WaitforCLICKeventon'$item$'=Wait for click event on '$item$'

ACTIVITY_DESC__WaitforCLICKeventonanitem.=Wait for click event on an item.

ACTIVITY_TITLE__WaitforCOMMANDeventon'$item$'=Wait for command event on '$item$'

ACTIVITY_MENU__WaitforCOMMANDeventon'$item$'=Wait for command event on '$item$'

ACTIVITY_DESC__WaitforCOMMANDeventonanitem.=Wait for command event on an item.

ACTIVITY_NAME__Waitcommand=Wait command

ACTIVITY_TITLE__Waituntil'$item$'exists=Wait until '$item$' exists

ACTIVITY_MENU__Waituntil'$item$'exists=Wait until '$item$' exists

ACTIVITY_DESC__Waitsbypollinguntilanitemexists.=Waits by polling until an item exists.

ACTIVITY_NAME__Waitexist=Wait exist

PROP_DESC_ACTIVITY__Nameofitemtocheckitsexistence.=Name of the item whose existence you wish to check.

PROP_NAME_ACTIVITY__Interval=Interval

PROP_DESC_ACTIVITY__Theintervals(inmilliseconds)onhowoftentocheckitemexistence.=The intervals of time (in milliseconds) in which to check an item's existence.

ACTIVITY_TITLE__Waituntil'$item$'getsfocus=Wait until '$item$' gets focus

ACTIVITY_MENU__Waituntil'$item$'getsfocus=Wait until '$item$' gets focus

ACTIVITY_DESC__Waitsuntilanitemgetsthefocus.=Waits until an item gets the focus.

ACTIVITY_NAME__Waitfocus=Wait focus

ACTIVITY_TITLE__Declarekey=Declare key

ACTIVITY_MENU__Declarekey=Declare key

ACTIVITY_DESC__Declaresacypheringkey=Declares an encryption key

ACTIVITY_CATEGORY__Key=Key

PROP_NAME_ACTIVITY__Keyname=Key name

PROP_NAME_ACTIVITY__Keytype(containerorcertificate)=Key type (container or certificate)

PROP_NAME_ACTIVITY__Keyusage(encryptionorsignature)=Key usage (encryption or signature)

ACTIVITY_TITLE__AddWorksheet=Add worksheet

ACTIVITY_MENU__AddWorksheet=Add worksheet

ACTIVITY_DESC__AddanExcelWorksheettotheactiveWorkbook.=Add an Excel worksheet to the active workbook.

ACTIVITY_NAME__AddWorksheet=Add worksheet

ACTIVITY_CATEGORY__ExcelLib=Excel Lib

PROP_NAME_ACTIVITY__Excelworksheet=Excel worksheet

PROP_DESC_ACTIVITY__Theexcelworksheetname.Ex._'Sheet1'=The name of the Excel worksheet, such as 'Sheet1'

ACTIVITY_TITLE__CloseExcel=Close Excel

ACTIVITY_MENU__CloseExcel=Close Excel

ACTIVITY_DESC__CloseExcelFile.=Close Excel file.

ACTIVITY_NAME__CloseExcel=Close Excel

ACTIVITY_TITLE__CreateExcel=Create Excel

ACTIVITY_MENU__CreateExcel=Create Excel

ACTIVITY_DESC__CreateExcelFile.=Create Excel file.

ACTIVITY_NAME__CreateExcel=Create Excel

ACTIVITY_DESC__Createexcel.=Create Excel

ACTIVITY_TITLE__Endexcel=End Excel

ACTIVITY_MENU__Endexcel=End Excel

ACTIVITY_DESC__Endexcel.=End Excel.

ACTIVITY_NAME__EndExcel=End Excel

ACTIVITY_TITLE__GetCell=Get cell

ACTIVITY_MENU__GetCell=Get cell

ACTIVITY_DESC__Getavaluefromacell=Get a value from a cell

ACTIVITY_NAME__GetCell=Get cell

PROP_NAME_ACTIVITY__Row=Row

PROP_DESC_ACTIVITY__TheRownumber.=The row number.

PROP_NAME_ACTIVITY__Column=Column

PROP_DESC_ACTIVITY__TheColumnnumber.=The column number.

PROP_NAME_ACTIVITY__Variable=Variable

PROP_DESC_ACTIVITY__Nameofthevariableofcontexttouseforthisaction.=Name of the variable from the context to use for this action.

ACTIVITY_TITLE__GetWorkbook=Get workbook

ACTIVITY_MENU__GetWorkbook=Get workbook

ACTIVITY_DESC__GetanExcelWorkbookalreadyopen.=Get an Excel workbook that is already open.

ACTIVITY_NAME__GetWorkbook=Get workbook

PROP_NAME_ACTIVITY__Excelworkbook=Excel workbook

PROP_DESC_ACTIVITY__Theexcelworkbookname.Ex._'Extraction.xlsx'=The Excel workbook name, such as Extraction.xlsx.

ACTIVITY_TITLE__GetWorksheet=Get worksheet

ACTIVITY_MENU__GetWorksheet=Get worksheet

ACTIVITY_DESC__GetanExcelWorksheetfromtheactiveWorkbook.=Get an Excel worksheet from the active workbook.

ACTIVITY_NAME__GetWorksheet=Get worksheet

ACTIVITY_TITLE__GetRangetable=Get range table

ACTIVITY_MENU__GetRangetable=Get range table

ACTIVITY_DESC__GetaRangetablevalues=Get values from a range table

ACTIVITY_NAME__GetRangetable=Get range table

PROP_NAME_ACTIVITY__StartColumn=Start column

PROP_DESC_ACTIVITY__Thestartingcolumn.Ex.'A','B','C',...=The starting column. For example: 'A', 'B', 'C',...

PROP_NAME_ACTIVITY__StartRow=Start row

PROP_DESC_ACTIVITY__Thestartingrow.Ex.1,2,3,...=The starting row. For example: 1, 2, 3.

PROP_NAME_ACTIVITY__LastColumn=Last column

PROP_DESC_ACTIVITY__Thelastcolumn.Ex.'A','B','C',...=The last column. For example: 'A', 'B', 'C'.

PROP_NAME_ACTIVITY__LastRow=Last row

PROP_DESC_ACTIVITY__Thelastrow.Ex.1,2,3,...=The last row. For example: 1, 2, 3.

PROP_NAME_ACTIVITY__DefaultValue=Default value

PROP_DESC_ACTIVITY__Thedefaultvaluetoputinundefinedcells("undefined"bydefault).=The default value to put in undefined cells (by default, this is "undefined").

ACTIVITY_TITLE__InitilizeExcel=Initialize Excel

ACTIVITY_MENU__InitilizeExcel=Initialize Excel

ACTIVITY_DESC__InitilizesExcelLibrarywithdifferentmodes.=Initializes the Excel library in different modes.

ACTIVITY_NAME__InitExcel=Init Excel

PROP_NAME_ACTIVITY__Newinstance=New instance

PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithanewexcelprocess...=If true, Excel is initialized in a new Excel process.

PROP_NAME_ACTIVITY__Visible=Visible

PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithavisiblemode...=If true, Excel is initialized in visible mode.

PROP_NAME_ACTIVITY__DisplayAlerts=Display alerts

PROP_DESC_ACTIVITY__Iftrue,contextorinitializeExcelwithadisplayalertsmode...=If true, Excel is initialized in display alerts mode.

ACTIVITY_TITLE__OpenExcel=Open Excel

ACTIVITY_MENU__OpenExcel=Open Excel

ACTIVITY_DESC__OpenExcelFile.=Open Excel file.

ACTIVITY_NAME__OpenExcel=Open Excel

PROP_NAME_ACTIVITY__Excelfilename=Excel filename

PROP_DESC_ACTIVITY__Theexcelfullfilename.Ex.'C_\\Contextor\\Extraction.xlsx'=The full Excel filename, such as 'C:\\IRPA\\Extraction.xlsx'

ACTIVITY_TITLE__releaseexcel=Release Excel

ACTIVITY_MENU__releaseexcel=Release Excel

ACTIVITY_DESC__Releaseexcel.=Release Excel

ACTIVITY_NAME__ReleaseExcel=Release Excel

ACTIVITY_TITLE__SaveAsExcel=Save as Excel

ACTIVITY_MENU__SaveAsExcel=Save as Excel

ACTIVITY_DESC__SaveAsExcelFile.=Save as an Excel file.

ACTIVITY_NAME__SaveasExcel=Save as Excel

ACTIVITY_TITLE__SaveExcel=Save Excel

ACTIVITY_MENU__SaveExcel=Save Excel

ACTIVITY_DESC__SaveExcelFile.=Save Excel file.

ACTIVITY_NAME__SaveExcel=Save Excel

ACTIVITY_TITLE__SetCell=Set cell

ACTIVITY_MENU__SetCell=Set cell

ACTIVITY_DESC__Setavalueinacell=Set a value in a cell

ACTIVITY_NAME__SetCell=Set cell

PROP_NAME_ACTIVITY__Value=Value

PROP_DESC_ACTIVITY__Thevaluetosetinthecell.=The value to set in the cell.

ACTIVITY_TITLE__SetRangetable=Set range table

ACTIVITY_MENU__SetRangetable=Set range table

ACTIVITY_DESC__SetaRangetablevalues=Set values in a range table

ACTIVITY_NAME__SetRangetable=Set range table

PROP_NAME_ACTIVITY__Usekeysasheader=Use keys as headers

PROP_DESC_ACTIVITY__Iftrue,contextoraddthekeysasHeaderofthetable.=If true, the keys are added as table headers.

ACTIVITY_TITLE__EndOutlook=End Outlook

ACTIVITY_MENU__EndOutlook=End Outlook

ACTIVITY_DESC__EndOutlook.=End Outlook

ACTIVITY_NAME__EndOutlook=End Outlook

ACTIVITY_CATEGORY__OutlookLib=Outlook Lib

ACTIVITY_TITLE__InitOutlook=Init Outlook

ACTIVITY_MENU__InitOutlook=Init Outlook

ACTIVITY_DESC__InitOutlook.=Initialize Outlook

ACTIVITY_NAME__InitOutlook=Init Outlook

ACTIVITY_TITLE__Mailattach=Attach a mail

ACTIVITY_MENU__Mailattach=Attach a mail

ACTIVITY_DESC__Attachfilestomail.=Attach files to a mail.

ACTIVITY_NAME__Mailattach=Attach a mail

PROP_NAME_ACTIVITY__Mailid=Mail ID

PROP_DESC_ACTIVITY__Themailidentifier=The mail identifier

PROP_DESC_ACTIVITY__Thefileorfilearraytobeattached.=The file or file array to be attached.

ACTIVITY_TITLE__Mailcreate=Create mail

ACTIVITY_MENU__Mailcreate=Create mail

ACTIVITY_DESC__Createmail.=Create mail.

ACTIVITY_NAME__Mailcreate=Create mail

PROP_DESC_ACTIVITY__Themailidentifierasreturnedvalue.=The mail identifier as a returned value.

PROP_NAME_ACTIVITY__Maildestination=Mail destination

PROP_DESC_ACTIVITY__Themaildestination=The destination of the mail

PROP_NAME_ACTIVITY__Mailsubject=Mail subject

PROP_DESC_ACTIVITY__Themailsubject=The subject of the mail

PROP_NAME_ACTIVITY__Mailbody=Mail body

PROP_DESC_ACTIVITY__Themailbody=The body of the mail

ACTIVITY_TITLE__Mailsend=Send mail

ACTIVITY_MENU__Mailsend=Send mail

ACTIVITY_DESC__Sendmail.=Send mail

ACTIVITY_NAME__Mailsend=Send mail

ACTIVITY_TITLE__CloseWord=Close Word

ACTIVITY_MENU__CloseWord=Close Word

ACTIVITY_DESC__CloseWordFile.=Close Word file.

ACTIVITY_NAME__CloseWord=Close Word

ACTIVITY_CATEGORY__WordLib=Word lib

ACTIVITY_TITLE__Endword=End Word

ACTIVITY_MENU__Endword=End Word

ACTIVITY_DESC__Endword.=End Word

ACTIVITY_NAME__EndWord=End Word

ACTIVITY_TITLE__Initword=Init Word

ACTIVITY_MENU__Initword=Init Word

ACTIVITY_DESC__Initword.=Init Word

ACTIVITY_NAME__InitWord=Init Word

ACTIVITY_TITLE__OpenWord=Open Word

ACTIVITY_MENU__OpenWord=Open Word

ACTIVITY_DESC__OpenWordFile.=Open Word file.

ACTIVITY_NAME__OpenWord=Open Word

PROP_NAME_ACTIVITY__Wordfilename=Word filename

PROP_DESC_ACTIVITY__Thewordfullfilename.Ex.'C_\\Contextor\\Letter.docx'=The full Word filename and path. For example: C:\\SAP\IRPA\\Letter.docx

ACTIVITY_TITLE__Releaseword=Release Word

ACTIVITY_MENU__Releaseword=Release Word

ACTIVITY_DESC__Releaseword.=Release Word

ACTIVITY_NAME__ReleaseWord=Release Word

ACTIVITY_TITLE__SaveAsWord=Save as Word

ACTIVITY_MENU__SaveAsWord=Save as Word

ACTIVITY_DESC__SaveAsWordFile.=Save as Word file.

ACTIVITY_NAME__SaveAsWord=Save as Word

PROP_DESC_ACTIVITY__Theexcelfullfilename.Ex.'C_\\Contextor\\Letter.docx'=The full Excel filename and path. For example: 'C:\\SAP\IRPA\\Letter.xlsx'

ACTIVITY_TITLE__SaveWord=Save Word

ACTIVITY_MENU__SaveWord=Save Word

ACTIVITY_DESC__SaveWordFile.=Save Word file.

ACTIVITY_NAME__SaveWord=Save Word

ACTIVITY_TITLE__SetBookmark=Set bookmark

ACTIVITY_MENU__SetBookmark=Set bookmark

ACTIVITY_DESC__SetaBookmarkwithvalue=Set a bookmark with value

ACTIVITY_NAME__SetBookmark=Set bookmark

PROP_NAME_ACTIVITY__bookmark=Bookmark

PROP_DESC_ACTIVITY__Thedefinedmarkbooktoset.Ex.'Name','Address','ZipCode',...=The defined bookmark to set, such as 'Name', 'Address', 'ZipCode'

PROP_NAME_ACTIVITY__Thevaluetosetinthebookmark=The value to set in the bookmark.

PROP_DESC_ACTIVITY__Thevaluetosetinthebookmark,...=The value to set in the bookmark

ACTIVITY_TITLE__Close'$page$'=Close '$page$'

ACTIVITY_MENU__Close'$page$'=Close '$page$'

ACTIVITY_DESC__Closesapageofanapplication.=Closes a page of an application.

ACTIVITY_CATEGORY__Page=Page

PROP_NAME_ACTIVITY__Page=Page

PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtoclose.=The name of the application page to close.

ACTIVITY_TITLE__Getitemson'$page$'=Get items on '$page$'

ACTIVITY_MENU__Getitemson'$page$'=Get items on '$page$'

ACTIVITY_DESC__Getsvaluesofallitemsonapage.=Gets values of all items on a page.

ACTIVITY_NAME__Getitems=Get items 

PROP_DESC_ACTIVITY__Nameofthepagetouseforthisaction.=Name of the page to use for this action.

PROP_DESC_ACTIVITY__Valuesshouldbestoredinanobject.Use___-$data$tostorevaluesinthecurrentcontext,__-variablenametostorevaluesinadedicatedvariable(Ex_myVar).__=Values must be stored in an object. Use: - $data$ to store values in the current context,- variable name to store values in a dedicated variable (example: myVar).

ACTIVITY_TITLE__Highlightitemsin'$page$'=Highlight items in '$page$'

ACTIVITY_MENU__Highlightitemsin'$page$'=Highlight items in '$page$'

ACTIVITY_DESC__Highlightsalldetecteditemsinapageofanapplication.=Highlights all detected items in an application page.

PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtouseforthisaction.=Name of the application page to use for this action.

PROP_DESC_ACTIVITY__Highlightdurationofdetecteditemsinmilliseconds.If0(zero),itemsremainhighlighted.=Highlight duration of detected items in milliseconds. If 0 (zero), items remain highlighted.

ACTIVITY_TITLE__Send'$expression$'in'$page$'=Send '$expression$' in '$page$'

ACTIVITY_MENU__Send'$expression$'in'$page$'=Send '$expression$' in '$page$'

ACTIVITY_DESC__Sendsakeyssequenceonapage.=Sends a key sequence to a page.

PROP_NAME_ACTIVITY__Keyssequence=Key sequence

ACTIVITY_TITLE__Screenshotof'$page$'=Screenshot of '$page$'

ACTIVITY_MENU__Screenshotof'$page$'=Screenshot of '$page$'

ACTIVITY_DESC__Takesascreenshotofapageofanapplication.=Takes a screenshot of an application page.

ACTIVITY_NAME__Screenshot=Screenshot

PROP_DESC_ACTIVITY__Nameofthetargetpagetotakeascreenshot.Thecapturedpicturefileisnamed'YYYYMMDD_HHMMSS_MS.png'andisstoredindirectory'.\log\Pictures'ofcurrentproject.=Name of the target page to take a screenshot of. The captured image file is named \u201CYYYYMMDD_HHMMSS_MS.png\u201D\u0094 and is stored in the current project's directory \u201C.\log\Pictures\u0094\u201D.

ACTIVITY_TITLE__Start'$page$'=Start '$page$'

ACTIVITY_MENU__Start'$page$'=Start '$page$'

ACTIVITY_DESC__Startsapageofanapplication.=Starts a page of an application.

PROP_DESC_ACTIVITY__Nameofthepageoftheapplicationtostart.=Name of the application page to start.

ACTIVITY_TITLE__Waitcallback=Wait callback

ACTIVITY_MENU__Waitcallback=Wait callback

ACTIVITY_DESC__Waitsuntilthepageisloaded.=Waits until the page is loaded.

ACTIVITY_NAME__Wait=Wait

ACTIVITY_DESC__Waitsanypageisloadedforautomation.=Waits until any page is loaded for automation.

ACTIVITY_NAME__Waitall=Wait all

ACTIVITY_DESC__WaitsuntiltheLOADeventofthepage=Waits until the page's load event

ACTIVITY_NAME__WaitLOAD=Wait load 

ACTIVITY_DESC__WaitsonceuntiltheLOADeventofthepage=Waits until the page's load event

ACTIVITY_NAME__WaitLOAD(once)=Wait for load (once)

ACTIVITY_DESC__Waitsuntilthepageisloadedandreadyforautomation.=Waits until the page is loaded and ready for automation.

ACTIVITY_NAME__Waitready=Wait ready

ACTIVITY_TITLE__Waituntil'$page$'isclosed=Wait until '$page$' is closed

ACTIVITY_MENU__Waituntil'$page$'isclosed=Wait until '$page$' is closed

ACTIVITY_DESC__Waitsuntilapageofanapplicationisclosed.=Waits until a page of an application is closed.

ACTIVITY_NAME__Waitclose=Wait close

ACTIVITY_TITLE__Waituntil'$page$'isupdated=Wait until '$page$' is updated

ACTIVITY_MENU__Waituntil'$page$'isupdated=Wait until '$page$' is updated

ACTIVITY_DESC__Waitsuntilapageofanapplicationisupdated.=Waits until a page of an application is updated.

ACTIVITY_NAME__Waitupdate=Wait update

ACTIVITY_TITLE__Displaymsgbox'$name$'=Display msgbox '$name$'

ACTIVITY_MENU__Displaymsgbox'$name$'=Display Msgbox '$name$'

ACTIVITY_DESC__Displaysamessagebox._If"Waitclosing"optionisticked,waitsuntiltheenduserclosesit.=Displays a message box. If the "Wait closing" option is selected, waits until the end user closes it.

ACTIVITY_NAME__MsgBox=MsgBox

ACTIVITY_CATEGORY__Popup=Popup

PROP_NAME_ACTIVITY__Name=Name

PROP_DESC_ACTIVITY__Uniquenameofthepopuptocreateandtodisplay.=The unique name of the popup to create and to display.

PROP_NAME_ACTIVITY__Title=Title

PROP_DESC_ACTIVITY__Titleofthepopuptocreateandtodisplay.=Title of the popup to create and to display.

PROP_NAME_ACTIVITY__Message=Message

PROP_DESC_ACTIVITY__Mainmessagetextthatappearsinthepopupwindow.HTMLtagscanbeused,like___-<br/>toinsertabreakline,__-<b>text</b>toputthetextinbold,__-<H4>Mymessageheader</H4>tomarkaheader,__-etc.=Main message text shown in the popup window. HTML tags can be used, such as: - <br/> to insert a line break,- <b>text</b> to put the text in bold,- <H4>My message header</H4> to mark a header.

PROP_NAME_ACTIVITY__Template=Template

PROP_DESC_ACTIVITY__Nameofthetemplatetouseforthepopupcreation.=The name of the template to use when creating the popup.

PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthispopupisclosedbytheenduser.=If true (i.e. if the option is selected), wait until this popup is closed by the end user.

ACTIVITY_TITLE__Closepopup'$name$'=Close popup '$name$'

ACTIVITY_MENU__Closepopup'$name$'=Close popup '$name$'

ACTIVITY_DESC__Closesapopup.=Closes a popup.

PROP_DESC_ACTIVITY__Nameofthepopuptoclose.=Name of the popup to close.

ACTIVITY_TITLE__Showtooltip'$name$'=Show tooltip '$name$'

ACTIVITY_MENU__Showtooltip'$name$'=Show tooltip '$name$'

ACTIVITY_DESC__Showsatooltipbox,whichisasmallinformationbox._Besuretouseatimeoutvaluetodismissthetooltipbox,otherwisethisonewillstayonthescreen.Theendusercannotcloseatooltipbox-itdisappearsbyitself.=Shows a tooltip box, which is a small information box. Make sure you use a timeout value to dismiss the tooltip box, otherwise it will remain on the screen. The end user cannot close a tooltip box - it disappears by itself.

ACTIVITY_NAME__Tooltip=Tooltip

PROP_DESC_ACTIVITY__Theuniquenameofthepopuptocreateandtodisplay.=The unique name of the popup to create and to display.

PROP_DESC_ACTIVITY__Thetitleofthepopuptocreateandtodisplay.=The title of the popup to create and to display.

PROP_NAME_ACTIVITY__Backgroundcolor=Background color

PROP_DESC_ACTIVITY__Thecolorofthebackgroundoftooltip.=The tooltip's background color.

PROP_NAME_ACTIVITY__Icon=Icon

PROP_DESC_ACTIVITY__Theicondisplayedinthetooltip.=The icon displayed in the tooltip.

PROP_NAME_ACTIVITY__Closingdelay=Closing delay

PROP_DESC_ACTIVITY__Thedelay(inmilliseconds)beforetheauto-closeoftooltip.=The delay (in milliseconds) before the tooltip is automatically closed.

ACTIVITY_TITLE__Getinvoiceresults=Get invoice results

ACTIVITY_MENU__Getinvoiceresults=Get invoice results

ACTIVITY_DESC__RetrievesinvoiceresultsinSAPAPI.=Retrieves invoice results in SAP API.

ACTIVITY_NAME__Getresults=Get results

ACTIVITY_CATEGORY__SAPAPI=SAP API

PROP_NAME_ACTIVITY__Invoiceobject=Invoice object

PROP_DESC_ACTIVITY__Invoiceobject=Invoice object

ACTIVITY_TITLE__Processaninvoice=Process an invoice

ACTIVITY_MENU__Processaninvoice=Process an invoice

ACTIVITY_DESC__UploadsaninvoiceinSAPAPI.=Uploads an invoice to the SAP API.

ACTIVITY_NAME__Processinvoice=Process invoice

ACTIVITY_TITLE__Scenariodeclaration=Scenario declaration

ACTIVITY_MENU__Scenariodeclaration=Scenario declaration

ACTIVITY_DESC__Usedtogeneratethecodeofscenariodeclaration.=Used to generate code for the scenario declaration.

ACTIVITY_NAME__Declaration=Declaration

ACTIVITY_CATEGORY__Scenario=Scenario

ACTIVITY_TITLE__Scenariodefaultonerror=Scenario default OnError

ACTIVITY_MENU__Scenariodefaultonerror=Scenario Default OnError

ACTIVITY_DESC__UsedtogenerateScenariodefaultOnErrorcode=Used to generate default OnError code for the scenario

ACTIVITY_NAME__DefaultOnError=Default OnError

ACTIVITY_TITLE__Scenariodefaultontimeout=Scenario default OnTimeout 

ACTIVITY_MENU__Scenariodefaultontimeout=Scenario Default OnTimeout 

ACTIVITY_DESC__UsedtogenerateScenariodefaultOnTimeoutcode=Used to generate default OnTimeout code for the scenario

ACTIVITY_NAME__DefaultOnTimeout=Default OnTimeout

ACTIVITY_TITLE__Endscenario=End scenario

ACTIVITY_MENU__Endscenario=End Scenario

ACTIVITY_DESC__Endsthecurrentscenario.=Ends the current scenario.

ACTIVITY_NAME__End=End

ACTIVITY_TITLE__Errormanagement=Error management

ACTIVITY_MENU__Errormanagement=Error management

ACTIVITY_DESC__Definesadedicatederrormanagementforascenario.=Defines dedicated error management for a scenario.

ACTIVITY_NAME__Error=Error

ACTIVITY_TITLE__Time-outmanagement=Timeout management

ACTIVITY_MENU__Time-outmanagement=Timeout management

ACTIVITY_DESC__Definesadedicatedtime-outmanagementforascenario.=Defines dedicated timeout management for a scenario.

ACTIVITY_NAME__Timeout=Timeout

ACTIVITY_TITLE__Start'$workflow$'=Start '$workflow$'

ACTIVITY_MENU__Start'$workflow$'=Start '$workflow$'

ACTIVITY_DESC__Startsaspecifiedscenario.Datatouseandtomanipulatewiththescenariocanalsobespecified._The"Waitend"optionwilllaunchascenario,andwaituntilthescenarioterminatessuccessfully.Oncethescenarioterminates,executioncontinueswiththenextaction.=Starts a specified scenario. The data to use and manipulate via the Scenario can also be specified. The "Wait end" option will launch a scenario and wait until the scenario terminates successfully. Once the scenario terminates, execution continues with the next action.

PROP_DESC_ACTIVITY__Nameofthescenariotostart.=Name of the scenario to start.

PROP_NAME_ACTIVITY__Datausedwiththescenario=Data used with the scenario

PROP_DESC_ACTIVITY__Thisisan'expression'.Use___-$data$tousedatafromthecontext,__-"..."touseconstantvalue(Ex_"myValue"),__-...touseuservariable(Ex_myData).__=This is an expression. Use: - $data$ to use data from the context,- "..." to use constant value (example: "myValue"),- ... to use user variable (example: myData).


PROP_NAME_ACTIVITY__Waitend=Wait end

PROP_DESC_ACTIVITY__Iftrue(i.e.iftheoptionisticked),waituntilthescenarioends.=If true (i.e. if the option is selected), wait until the scenario ends.

PROP_NAME_ACTIVITY__Waitsemaphore=Wait semaphore

PROP_DESC_ACTIVITY__Setawaitsemaphoretowaitfortheendofdifferentscenarios.=Set a wait semaphore to wait for the end of different Scenarios.

ACTIVITY_TITLE__Scenariostarter=Scenario starter

ACTIVITY_MENU__Scenariostarter=Scenario starter

ACTIVITY_DESC__UsedtogenerateScenariostartercode=Used to generate starter code for the scenario

ACTIVITY_TITLE__Scenariotester=Scenario tester

ACTIVITY_MENU__Scenariotester=Scenario tester

ACTIVITY_DESC__Usedtogeneratethecodetocreateatestingentryinmainmenuforscenario.=Used to generate the code to create a testing entry for the scenario in the main menu.

ACTIVITY_NAME__Debug=Debug

ACTIVITY_TITLE__Stepdeclaration=Step declaration

ACTIVITY_MENU__Stepdeclaration=Step declaration

ACTIVITY_DESC__Usedtogeneratethecodeofstepdeclaration.=Used to generate the code for a step declaration.

ACTIVITY_NAME__Step=Step

ACTIVITY_TITLE__Disablesteptimeout=Disable step timeout

ACTIVITY_MENU__Disablesteptimeout=Disable step timeout

ACTIVITY_DESC__Usedtodisablesteptimeout.=Used to disable step timeout.

ACTIVITY_NAME__Disabletimeout=Disable timeout

ACTIVITY_TITLE__Declaresetting=Declare setting

ACTIVITY_MENU__Declaresetting=Declare setting

ACTIVITY_DESC__Declaresasetting=Declares a setting

ACTIVITY_CATEGORY__Setting=Setting

PROP_NAME_ACTIVITY__Settingname=Setting name

PROP_NAME_ACTIVITY__Optionalcypheringkey=Optional encryption key

ACTIVITY_TITLE__Getsetting=Get setting

ACTIVITY_MENU__Getsetting=Get setting

ACTIVITY_DESC__Retrievessettingvalue=Retrieves the value of a setting

PROP_NAME_ACTIVITY__Settingvalue=Setting value

ACTIVITY_TITLE__Setsetting=Set setting

ACTIVITY_MENU__Setsetting=Set setting

ACTIVITY_DESC__Setssettingvalue=Sets the setting's value

ACTIVITY_TITLE__Settoclipboard=Set to clipboard

ACTIVITY_MENU__Settoclipboard=Set to clipboard

ACTIVITY_DESC__Placesthespecifiedtextontheclipboard.Thepreviousclipboardcontentisnotsaved.=Places the specified text in the clipboard. The clipboard's previous content is not saved.

ACTIVITY_NAME__Setclipboard=Set clipboard

ACTIVITY_CATEGORY__System=System

PROP_DESC_ACTIVITY__Thetextmessagetobecopiedtotheclipboard.Use___-$data$tousedatafromthecontext,__-"..."touseaconstantvalue(Ex_"Mymessage"),__-...touseanuservariablemustbedeclaredbefore(Ex_myMsg).=The text message to be copied to the clipboard. Use: - $data$ to use data from the context,- "..." to use a constant value (example: "My message"),- ... to use an user variable must be declared before (example: myMsg).

ACTIVITY_TITLE__Goal_$description$=Goal: $description$

ACTIVITY_MENU__Goal_$description$=Goal: $description$

ACTIVITYDESCDescribesafunctionalstep.Providesaplacetoenterinternalcommentsfortheproject.Thisallowsyoutoincludenoteswithouthavingthesteprun.Thisisvaluableforprovidingskilleddescriptions.Itcanalsohelptoseparatedifferentsectionsofyourworkflow.Norunningc=Describes a functional step. Provides a place for entering internal comments on the project. This allows you to include notes without having the step run. This is valuable for providing effective descriptions. It can also help to separate different sections of your workflow. This activity does not generate any running code. It merely inserts an empty code block to be filled by the developer later (to implement the appropriate actions in this functional block).

ACTIVITY_NAME__Customactivity(deprecated)=Custom activity (deprecated)

ACTIVITY_TITLE__Custom=Custom

ACTIVITY_MENU__Custom=Custom

ACTIVITY_DESC__DescribeafunctionalitytobeimplementedlaterinJavascriptintheproject.=Describe functionality to be implemented in JavaScript later in the project.

ACTIVITY_NAME__Custom=Custom

ACTIVITY_TITLE__Setcontext=Set context

ACTIVITY_MENU__Setcontext=Set context

ACTIVITY_DESC__Assignsavaluetoavariableofcurrentdefinedcontext,andtoupdateitduringarun.Tosetittoaninitialvalue,simplyputthenumberortextinthe"Value"field.=Assigns a value to a variable of the current defined context, and update it during a run. To set it to an initial value, simply enter the number or text in the Value field.

ACTIVITY_NAME__Setcontext=Set context

PROP_DESC_ACTIVITY__Valuetoassigntothevariable.Thisisan'expression'.Use___-$data$toassigndatafromthecontext,__-"..."touseconstantvalue(Ex_"OK"),__-...tosetnumericalvalueortouseanuservariable(Ex_myData).__=Value to assign to the variable. This is an expression. Use: - $data$ to use data from the context,- "..." to use constant value (example: "myValue"),- ... to set numerical value or to use an user variable (example: myData).

ACTIVITY_TITLE__Diagnostic=Diagnostics

ACTIVITY_MENU__Diagnostic=Diagnostics

ACTIVITYDESCPerformsacompleteandadvanceddiagnostic.Collectsdataaboutdesktopinformation,runningenvironment,installedprograms,JScontextandXMLcontext.Thiscanbeusedformanypurposes,suchastohelptroubleshootingissuesandtomakelocalorremoteanalysis.Thediagnos=Performs complete, advanced diagnostics. \nCollects data on the desktop, the running environment, installed programs, the JS context and the XML context. \nThis can be used for many purposes, such as in troubleshooting and to perform local or remote analytics. \nThe diagnostics file, called "*.diagnostic.pscl", is stored in the current project's ".\Log" folder.

ACTIVITY_NAME__Diagnostic=Diagnostics

ACTIVITY_TITLE__Kill'$process$'=Kill '$process$'

ACTIVITY_MENU__Kill'$process$'=Kill '$process$'

ACTIVITYDESCForcesarunningprogramtoclose.Allinstancesofarunningprocessarekilled.Theprocesstokillisfoundbasedontheprogramfilename.Ifpossible,usetheclosecommandforanapplicationorapagebecauseitallowstheprogramtoshutdowngracefully."Killprocess"willshutth=Forces a running program to close. All instances of the running process are killed. The process to kill is found through the program filename. If possible, use the close command for applications and pages, because it allows the program to shut down gracefully. "Kill process" will shut down the program without saving any changes or data. To use this activity, you must include the WMI library in the project.

ACTIVITY_NAME__Killprocess=Kill process

PROP_NAME_ACTIVITY__Process=Process

PROP_DESC_ACTIVITY__Thenameofprocesstokillallrunninginstances.Forexample_iexplore.exe=The name of the process to kill all running instances of. For example: iexplore.exe

ACTIVITY_TITLE__Writelog=Write log

ACTIVITY_MENU__Writelog=Write log

ACTIVITY_DESC__Providesamethodtoaddyourentriestothelogfileandindebugwindowwithaseveritylevel.Thiscanbeusedformanypurposes,suchasdebuggingscripts,andrecordinginformation.=Provides a method to add your entries to the log file and in the debug window along with a severity level. This can be used for many purposes, such as debugging scripts and recording information.

ACTIVITY_NAME__Log=Log

PROP_DESC_ACTIVITY__Thetextmessagewhichisstoredinlogandappearsindebugwindow.Onlystringsaresupported.=The text message that is stored in the log and is shown in the debug window. Only strings are supported.

PROP_NAME_ACTIVITY__Level=Level

PROP_DESC_ACTIVITY__Theseveritylevelofthemessagetobelogged.=The severity level of the message to be logged.

ACTIVITY_DESC__Addamessagetothelogfileandindebugwindowwithaseveritylevel.=Add a message to the log file and in the debug window along with a severity level.

PROP_DESC_ACTIVITY__Thetextmessagewhichisstoredinlogandappearsindebugwindow.__Thisisan'expression'.Use___-$data$togetdatafromtheContext(Ex_$data$+'+++')__-'...'tosetaconstantvalue(Ex_'myvalue')__-...=The text message that is stored in the log and is shown in the debug window. This is an expression. Use : - $data$ to get data from the context (example: $data$ + '+++')- '...' to set a constant value (example: 'my value').

ACTIVITY_TITLE__Readregistrykey=Read registry key

ACTIVITY_MENU__Readregistrykey=Read registry key

ACTIVITY_DESC__ReadsasettingfromtheWindowssystemregistry.=Reads a setting from the Windows system registry.

ACTIVITY_NAME__Readregistry=Read registry

PROP_DESC_ACTIVITY__Nameofthevariabletouseforstorethereadresult.=Name of the variable to use to store the read result.

PROP_NAME_ACTIVITY__Registrykey=Registry key

PROP_DESC_ACTIVITY__Entirekey,includingthetop-levelandfinalkeyname,shouldbeputtogether.Forexample_HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\InternetExplorer\\Version=The entire key, including the top-level and final key name, must be assembled. For example: HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Version

ACTIVITY_TITLE__Restart=Restart

ACTIVITY_MENU__Restart=Restart

ACTIVITY_DESC__ShutsdownContextorInteractiveapplicationandrestartsitwiththesamecurrentrunningproject.Nouserinterventionisrequired.=Shuts down the Desktop Agent application and restarts it with the same current running project. No user intervention is required.

ACTIVITY_NAME__Restart=Restart

ACTIVITY_TITLE__Screenshot=Screenshot

ACTIVITY_MENU__Screenshot=Screenshot

ACTIVITY_DESC__Takesafull-screenscreenshot.TheformatoftheimageisWindowsBitmap(.BMP).Thecapturedimageisstoredinfolder'.\Log\Pictures'ofcurrentproject.=Takes a full-screen screenshot. The image format is Windows Bitmap (.BMP). The captured image is stored in the current project's \u201C.\Log\Pictures\u201D folder.

ACTIVITY_TITLE__Shutdown=Shutdown

ACTIVITY_MENU__Shutdown=Shutdown

ACTIVITY_DESC__ShutsdownContextorInteractive.Nouserinterventionisrequired.=Shuts down Desktop Agent. No user intervention is required.

ACTIVITY_NAME__Shutdown=Shutdown

ACTIVITY_TITLE__Sleep($delay$ms)=Sleep ($delay$ ms)

ACTIVITY_MENU__Sleep($delay$ms)=Sleep ($delay$ ms)

ACTIVITY_DESC__Freezestheexecutionofthecurrentthreaduntilatime-outintervalelapses.=Freezes execution of the current thread until a timeout interval elapses.

ACTIVITY_NAME__Sleep=Sleep

PROP_NAME_ACTIVITY__Delay=Delay

PROP_DESC_ACTIVITY__Thetimeintervalforwhichexecutionistobesuspended,inmilliseconds.=The time interval in milliseconds during which execution will be suspended.

PROP_NAME_ACTIVITY__expression=Expression

ACTIVITY_TITLE__Delay($delay$ms)=Delay ($delay$ ms)

ACTIVITY_MENU__Delay($delay$ms)=Delay ($delay$ ms)

ACTIVITYDESCDelaysexecutionduringsomemilliseconds.Thisisthestandardpausethatshouldbeusedinnormalsituations.Itsimplypausestheexecutionofthescriptfortheindicatedduration.ItpermitsuserinteractionwithContextorInteractiveandotherprogramsforthedurationofth=Delays execution for some milliseconds.\nThis is the standard pause that should be used in normal situations. It simply pauses the execution of the script for the indicated period.\nIt allows user interaction with Desktop Agent and other programs during the pause.\nThis can be useful to wait for a process to complete, to avoid going too fast for the operating system, or to give the user time to react.

ACTIVITY_NAME__Delay=Delay

ACTIVITY_CATEGORY__Flow-Wait=Flow - Wait

PROP_DESC_ACTIVITY__Thetimeintervalforwhichexecutionisdelayed,inmilliseconds.=The time interval in milliseconds during which execution is delayed.

ACTIVITY_TITLE__Waituntil$expression$=Wait until $expression$

ACTIVITY_MENU__Waituntil$expression$=Wait until $expression$

ACTIVITY_DESC__Waitsuntilatestconditionevaluatestotrue.=Waits until a test condition evaluates to true.

ACTIVITY_NAME__Waituntil=Wait until

PROPDESCACTIVITYExpressionevaluatedevery250miliseconds,withinthelimitof20attempts.Ifconditionevaluatestofalse,thepollingisre-executed.Whenconditionevaluatestotrue,controlpassestothestatementfollowing.Use-$item$toperformtestonanitem(Ex!$item$.exist())=The expression is evaluated every 250 milliseconds for up to 20 attempts. If the condition evaluates to false, polling is re-executed. When condition evaluates to true, control passes to the following statement . Use: - $item$ to perform test on an item (example: !$item$.exist()),- $data$ to perform test on data in the context (example: $data$ == '').

ACTIVITY_TITLE__Waitfor'$waitSem$'=Wait for '$waitSem$'

ACTIVITY_MENU__Waitfor'$waitSem$'=Wait for '$waitSem$'

ACTIVITY_DESC__Waitsforasemaphore.=Waits for a semaphore.

ACTIVITY_NAME__Waitsemaphore=Wait semaphore

PROP_NAME_ACTIVITY__Semaphore=Semaphore

PROP_DESC_ACTIVITY__Thenameofthewaitedsemaphore,whichmustbedeclaredearlier.=The name of the semaphore to be waited for, which must have been declared already.

ACTIVITY_TITLE__Timer($delay$ms)=Timer ($delay$ ms)

ACTIVITY_MENU__Timer($delay$ms)=Timer ($delay$ ms)

ACTIVITY_DESC__Setsatimerwhichexecutesspecifiedactionsonceafterthetimerexpires.=Sets a timer that executes specified actions once after the timer expires.

ACTIVITY_NAME__Timer=Timer

PROP_NAME_ACTIVITY__delay=Delay

PROP_DESC_ACTIVITY__Thenumberofmillisecondstowaitbeforeexecutingthecode.=The number of milliseconds to wait before executing the code.

PROP_NAME_ACTIVITY__DisplayName=Display name

PROP_DESC_ACTIVITY__DisplayName=Name used to display the activity in the workflow

PROP_CATEGORY__1-General=1 - General

PROP_NAME_ACTIVITY__Description=Description

PROP_DESC_ACTIVITY__Description=Description of the activity 

PROP_CATEGORY__2-Activity=2 - Activity

PROP_NAME_ACTIVITY__IsStep=Is step

PROP_DESC_ACTIVITY__IsStep=Check to set this activity in a separate step

PROP_CATEGORY__3-Codegeneration=3 - Code generation

PROP_NAME_ACTIVITY__Stepname=Step name

PROP_DESC_ACTIVITY__Stepname=Manually set the step name (used in generated code)

PROP_NAME_ACTIVITY__Waitmode=Wait mode

PROP_DESC_ACTIVITY__SetthewaythePageiswaited__-wait_standardmode_-waitReady_waituntilthePageisreadyforautomation_-waitLoad_waitforaLOADevent_-waitLoadOnce_waitonceforaLOADevent_-waitAll_waituntilanyPageloads=Set the way in which the page waits:- wait: standard mode- waitReady: wait until the page is ready for automation- waitLoad: wait for a load event- waitLoadOnce: wait once for a load Event- waitAll: wait until any page loads

PROPCATEGORYFlow=Flow

PROPNAMEACTIVITYFlowchart=Flowchart

PROPDESCACTIVITYInsertsanewflowchart.=Inserts a new flowchart.

PROPNAMEACTIVITYWaitmultiple=Wait multiple

PROPDESCACTIVITYSetsahandlertowaitforseveralevents.=Sets a handler to wait for several events.

PROPNAMEACTIVITYSwitchoutput=Switches output

PROPDESCACTIVITYDefinesaconditionalswitchtofollowwaywithdifferentsteps.=Defines a conditional switch based on the output of the previous step.

ACTIVITYCATEGORYSAPGUI=SAP GUI

ACTIVITYTITLEClickonGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYMENUClickonGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Click on GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYDESCClickonGUICtrlGridViewCell=Click on GUICtrlGridView Cell

ACTIVITYNAMEClickCell=Click cell

PROPNAMEACTIVITYRowNumber=Row number

PROPDESCACTIVITYThisisan4.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')-...=This is an \u2018expression\u2019. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'my value')\n- ...\n

PROPNAMEACTIVITYColumnCode=Column code

ACTIVITYTITLEGetdatafromGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYMENUGetdatafromGUICtrlGridViewcellofrow$expression$andcol$col$in$item$=Get data from GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYDESCGetdatafromGUICtrlGridViewcell=Get data from GUICtrlGridView cell

ACTIVITYTITLEGetthelistofColumnsfromGUICtrlGridViewin$item$=Get the list of columns from GUICtrlGridView in $item$

ACTIVITYMENUGetthelistofColumnsfromGUICtrlGridViewin$item$=Get the list of columns from GUICtrlGridView in $item$

ACTIVITYDESCGetthelistofColumnsfromGUICtrlGridView=Get the list of columns from GUICtrlGridView

ACTIVITYNAMEGetColumns=Get columns

ACTIVITYTITLEGetdatafromGUICtrlGridViewrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$

ACTIVITYMENUGetdatafromGUICtrlGridViewrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$

ACTIVITYDESCGetdatafromGUICtrlGridViewrow=Get data from GUICtrlGridView row

ACTIVITYNAMEGetRow=Get row

ACTIVITYTITLEGetthenumberofrowsfromGUICtrlGridViewin$item$=Get the number of rows from GUICtrlGridView in $item$

ACTIVITYMENUGetthenumberofrowsfromGUICtrlGridViewin$item$=Get the number of rows from GUICtrlGridView in $item$

ACTIVITYDESCGetthenumberofrowsfromGUICtrlGridView=Get the number of rows from GUICtrlGridView

ACTIVITYNAMEGetRowCount=Get row count

ACTIVITYTITLESelecttheGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Select the GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYMENUSelecttheGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Select the GUICtrlGridView cell of row $expression$ and col $col$ in $item$

ACTIVITYDESCSelecttheGUICtrlGridViewCell=Select the GUICtrlGridView cell

ACTIVITYNAMESelectCell=Select cell

PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$col$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $col$ + '+++')\n- '...' to set a constant value (example: 'my value')\n- ...\n

ACTIVITYTITLEGettheselectedcolumnfromGUICtrlGridViewin$item$=Get the selected column from GUICtrlGridView in $item$

ACTIVITYMENUGettheselectedcolumnfromGUICtrlGridViewin$item$=Get the selected column from GUICtrlGridView in $item$

ACTIVITYDESCGettheselectedcolumnfromGUICtrlGridView=Get the selected column from GUICtrlGridView

ACTIVITYNAMESelectedColumn=Selected column

ACTIVITYTITLEGettheselectedrowfromGUICtrlGridViewin$item$=Get the selected row from GUICtrlGridView in $item$

ACTIVITYMENUGettheselectedrowfromGUICtrlGridViewin$item$=Get the selected row from GUICtrlGridView in $item$

ACTIVITYDESCGettheselectedrowfromGUICtrlGridView=Get the selected row from GUICtrlGridView

ACTIVITYNAMESelectedRow=Selected row

ACTIVITYTITLEClicktoolbarmenuitemofID$expression$in$item$=Click toolbar menu item of ID $expression$ in $item$

ACTIVITYMENUClicktoolbarmenuitemofID$expression$in$item$=Click toolbar menu item of ID $expression$ in $item$

ACTIVITYDESCClicktoolbarmenuitem=Click toolbar menu item

ACTIVITYNAMESelectToolbarMenuItemByTechnicalID=Select toolbar menu item by technical ID

PROPNAMEACTIVITYMenuitem'sId=Menu item's ID

ACTIVITYTITLEClicktoolbarmenuitemofPosition$expression$in$item$=Click toolbar menu item of position $expression$ in $item$

ACTIVITYMENUClicktoolbarmenuitemofPosition$expression$in$item$=Click toolbar menu item of position $expression$ in $item$

ACTIVITYNAMESelectToolbarMenuByPosition=Select toolbar menu item by position

PROPNAMEACTIVITYMenuitem'sposition=Menu item's position

ACTIVITYTITLEClicktoolbarmenuitemofText$expression$in$item$=Click toolbar menu item of text $expression$ in $item$

ACTIVITYMENUClicktoolbarmenuitemofText$expression$in$item$=Click toolbar menu item of text $expression$ in $item$

ACTIVITYNAMESelectToolbarMenuByText=Select toolbar menu by text

PROPNAMEACTIVITYMenuitem'stext=Menu item's text

ACTIVITYTITLESetvalue$expression$inGUICtrlGridViewCellofrow$row$andcol$col$in$item$=Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$

ACTIVITYMENUSetvalue$expression$inGUICtrlGridViewCellofrow$row$andcol$col$in$item$=Set value $expression$ in GUICtrlGridView Cell of row $row$ and col $col$ in $item$

ACTIVITYDESCSetvalueinGUICtrlGridViewCell=Set value in GUICtrlGridView cell

ACTIVITYNAMESelectToolbarMenuItemByID=Select toolbar menu item by ID

ACTIVITYNAMESelectToolbarMenuItemByPosition=Select toolbar menu item by position

ACTIVITYNAMESelectToolbarMenuItemByText=Select toolbar menu item by text

ACTIVITYTITLEChangeactivesheet=Change the active sheet.

ACTIVITYMENUChangeactivesheet=Change active sheet

ACTIVITYDESCChangeactivesheet.=Change the active sheet.

ACTIVITYNAMEChangeactivesheet=Change active sheet

PROPNAMEACTIVITYWorksheetname=Worksheet name

PROPDESCACTIVITYTheexcelfullfilename.Pleaseusethedoublequote.Ex."Sheet1"=The full Excel filename. Please use double quotes, such as "Sheet1".

ACTIVITYTITLEFormatBackgroundColor=Format the background color.

ACTIVITYMENUFormatBackgroundColor=Format background color

ACTIVITYDESCChangethebackgroundcolorofarange=Change the background color of a range.

ACTIVITYNAMEFormatBackgroundColor=Format background color

ACTIVITYCATEGORYExcelLib|Formatting=Excel Lib|Formatting

PROPNAMEACTIVITYDefinitionofRange=Range definition

PROPDESCACTIVITYStringwhichrepresentstherange.Herearesomeexamplesforarange"A;5;G;67"or"1;5;7;67"or"A5G67".HerearesomeexamplesforasinglecellA;8or1;8orA8=String representing the range. Here are some examples of a range: "A;5;G;67" or "1;5;7;67" or "A5:G67". Here are some examples of a single cell: A;8 or 1;8 or A8.

PROPNAMEACTIVITYFontColor=Font color

PROPDESCACTIVITYColortoapplyasanArrayRGB.Thecollectione.color.rgbcanbeusedtoselectpredefinedcolors.=Color to apply as an array RGB. The collection e.color.rgb can be used to select predefined colors.

ACTIVITYTITLEFormatBold=Format bold

ACTIVITYMENUFormatBold=Format bold

ACTIVITYDESCFormatthetextofarangeasbold=Format the text of a range as bold.

ACTIVITYNAMEFormatBold=Format bold

PROPNAMEACTIVITYActivateBold=Activate bold

PROPDESCACTIVITYtruetoactivateBold.falsetoremoveit.=True to activate bold, false to remove it.

ACTIVITYTITLEFormatFontColor=Format the font color.

ACTIVITYMENUFormatFontColor=Format font color

ACTIVITYDESCChangethefontColorofarange=Change the font color of a range.

ACTIVITYNAMEFormatFontColor=Format font color

ACTIVITYTITLEFormatFontSize=Format the font size.

ACTIVITYMENUFormatFontSize=Format font size

ACTIVITYDESCChangethefontSizeofarange=Change the font size of a range.

ACTIVITYNAMEFormatFontSize=Format font size

PROPNAMEACTIVITYFontSize=Font size 

PROPDESCACTIVITYFontsizetoapply.Defineapositiveinteger.=Font size to apply. Define a positive integer.

ACTIVITYTITLEFormatItalic=Format italic.

ACTIVITYMENUFormatItalic=Format italic

ACTIVITYDESCFormatthetextofarangeasitalic=Format the text of a range as italic.

ACTIVITYNAMEFormatItalic=Format italic

PROPNAMEACTIVITYActivateItalic=Activate italic

PROPDESCACTIVITYtruetoactivateItalic.falsetoremoveit.=True to activate italic, false to remove it.

ACTIVITYTITLEGetFormulas=Get formulas.

ACTIVITYMENUGetFormulas=Get formulas

ACTIVITYDESCGetformulasfromarange=Get the formulas from a range.

ACTIVITYNAMEGetFormulas=Get formulas

PROPDESCACTIVITYThestartingcolumn.Ex.'A','b',3,...Thelimitis"XFD"or16384.=The starting column, such as  'A', 'b', 3,... \n The limit is "XFD" or 16384.

PROPDESCACTIVITYThelastcolumn.Ex.'A','b',3,...Thelimitis"XFD"or16384.=The last column such as  'A', 'b', 3,...  \n The limit is "XFD" or 16384.

PROPNAMEACTIVITYDefaultValueorFormulatofillundefinedcells=Default value or formula for undefined cells

PROPDESCACTIVITYThedefaultvalueorformulatoputinundefinedcells("undefined"bydefault).=The default value to put in undefined cells (by default, this is "undefined").

ACTIVITYTITLEClearFormatting=Clear formatting.

ACTIVITYMENUClearFormatting=Clear formatting

ACTIVITYDESCClearFormatting=Clear the formatting.

ACTIVITYNAMEClearFormatting=Clear formatting

ACTIVITYCATEGORYWordLib|Formatting=Word Lib|Formatting

ACTIVITYDESCFormatBold=Format bold

PROPDESCACTIVITYTruetoactivatebold.Falsetoremoveit.=True to activate bold. False to remove it.

ACTIVITYDESCFormatItalic=Format  italic

PROPDESCACTIVITYTruetoactivateItalic.Falsetoremoveit.=True to activate italic. False to remove it.

ACTIVITYDESCFormatFontSize=Format font size

PROPDESCACTIVITYThefontsizeisapositiveinteger.=The font size is a positive integer.

ACTIVITYTITLEFormatHighlight=Format highlight.

ACTIVITYMENUFormatHighlight=Format highlight

ACTIVITYDESCHighlightCells=Highlight cells.

ACTIVITYNAMEFormatHighlight=Format highlight

PROPNAMEACTIVITYHighlightColor=Highlight color

PROPDESCACTIVITYThehighlightcolorhastobeselectedthankstoctx.word.constants.WdColorIndexenumeration.=The highlight color must be selected based on ctx.word.constants.WdColorIndex enumeration.

ACTIVITYTITLEReplaceAll=Replace all.

ACTIVITYMENUReplaceAll=Replace all

ACTIVITYDESCReplaceAll=Replace all.

ACTIVITYNAMEReplaceAll=Replace all

PROPNAMEACTIVITYTexttofind=Text to find

PROPDESCACTIVITYThetextthatyouwanttofindandthenreplace.=The text you want to find and replace.

PROPNAMEACTIVITYTexttoreplace=Text to replace

PROPDESCACTIVITYThetextthatyouwanttousetoreplacetheformerone.=The text you want to replace the former one with.

PROPNAMEACTIVITYadvandedParameters=Advanced parameters

PROPDESCACTIVITYCanbeusetoreplaceonlyoneoccurence,ortosearchwith'matchcase'ortosearchwith'matchWholeWord'.Toactivatealladvancedparameter,hereisanexample{"replacementType"ctx.word.constants.WdReplace.wdReplaceOne,"matchCase"true,"matchWholeWord"true}=Can be use to replace a single occurrence, or to search with 'Match Case' or to search with 'Match Whole Word'. To activate all advanced parameter, here is an example {"replacementType" : ctx.word.constants.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}.

ACTIVITYTITLEGet$nRows$rowsofvaluesstartingfrom$expression$in$item$=Get $nRows$ rows of values starting from $expression$ in $item$.

ACTIVITYMENUGet$nRows$rowsofvaluesstartingfrom$expression$in$item$=Get $nRows$ rows of values starting from $expression$ in $item$

ACTIVITYDESCGetasetofrowsinGUIGridViewPane=Get a set of rows in GUIGridViewPane.

ACTIVITYNAMEGetRows=Get rows

PROPDESCACTIVITYNameoftheitem.=Name of the item.

PROPNAMEACTIVITYStartRowIndex=Start row index

PROPNAMEACTIVITYNumberofRows=Number of rows

ACTIVITYTITLEGet$nRows$rowsofvaluesstartingfrom$expression$forcolumn$colId$in$item$=Get $nRows$ rows of values starting from $expression$ for column $colId$ in $item$.

ACTIVITYMENUGet$nRows$rowsofvaluesstartingfrom$expression$forcolumn$colId$in$item$=Get $nRows$ Rows of Values Starting from $expression$ for Column $colId$ in $item$

ACTIVITYDESCGetasetofrowsforacolumninGUIGridViewPane=Get a set of rows for a column in GUIGridViewPane.

ACTIVITYNAMEGetRowsByColumn=Get rows by column

PROPNAMEACTIVITYColumnId=Column ID

ACTIVITYTITLEGetallthevisiblerowsofvaluesin$item$=Get all the visible rows of values in $item$.

ACTIVITYMENUGetallthevisiblerowsofvaluesin$item$=Get all visible rows of values in $item$

ACTIVITYDESCGetsallthevisiblerowsinGUIGridViewPane=Gets all the visible rows in GUIGridViewPane.

ACTIVITYNAMEGetAllVisibleRows=Get all visible rows 

ACTIVITYTITLESelectrow$expression$in$item$=Select row $expression$ in $item$.

ACTIVITYMENUSelectrow$expression$in$item$=Select row $expression$ in $item$

ACTIVITYDESCSelectstheGUICtrlGridViewRow=Selects the GUICtrlGridView row.

ACTIVITYNAMESelectRow=Select row 

PROPDESCACTIVITYThehighlightcolorhastobeselectedthankstoe.word.WdColorIndexenumeration.=Select the highlight color based on the e.word.WdColorIndex enumeration. 

PROPDESCACTIVITYCanbeusetoreplaceonlyoneoccurrence,ortosearchwith'matchcase'ortosearchwith'matchWholeWord'.Toactivatealladvancedparameters,hereisanexample{"replacementType"e.word.WdReplace.wdReplaceOne,"matchCase"true,"matchWholeWord"true}=Can be used to replace a single occurrence, or to search with 'match case', or to search with 'match Whole Word'. Here is an example for activating all advanced parameters: {"replacementType" : e.word.WdReplace.wdReplaceOne, "matchCase" : true, "matchWholeWord" : true}.

ACTIVITYCATEGORYFormatting=Formatting

ACTIVITYTITLEOpen$item$=Open $item$.

ACTIVITYMENUOpen$item$=Open $item$

ACTIVITYDESCOpenMenu=Open the menu.

ACTIVITYNAMEOpen=Open

ACTIVITYCATEGORYSAPUI5=SAPUI5

ACTIVITYCATEGORYActionSelect=Action Select

ACTIVITYTITLEAddCredit$data$in$item$=Add credit $data$ in $item$.

ACTIVITYMENUAddCredit$data$in$item$=Add credit $data$ in $item$

ACTIVITYDESCAddCreditItemcontent=Add credit item content.

ACTIVITYNAMEAddCredit=Add credit 

ACTIVITYCATEGORYTAccount=TAccount

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantvaluebyusing'...'(ex'123')-Useavariablebyusing...(ex$data$++++)=You can:\n- Select or create an entry in the context\n- Use a constant value by using '...' (example: '123')\n- Use a variable by using _..._ (example: $data$ + +++)

ACTIVITYTITLEAddDebit$data$in$item$=Add debit $data$ in $item$.

ACTIVITYMENUAddDebit$data$in$item$=Add debit $data$ in $item$

ACTIVITYDESCAddDebitItemcontent=Add debit item content.

ACTIVITYNAMEAddDebit=Add debit 

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantvaluebyusing'...'(ex'123')-Useavariablebyusing...(ex$data$+++)=You can :\n- Select or create an entry in the context\n- Use a constant value by using '...' (example: '123')\n- Use a variable by using _..._ (example: $data$ + ++)

ACTIVITYTITLECheck=Check.

ACTIVITYMENUCheck=Check

ACTIVITYDESCCheckToggleButton=Check the toggle button.

ACTIVITYNAMECheck=Check

ACTIVITYCATEGORYToggleButton=Toggle button

ACTIVITYTITLEClearSelectionin$item$=Clear the selection in $item$.

ACTIVITYMENUClearSelectionin$item$=Clear selection in $item$

ACTIVITYDESCClearSelectioninTable=Clear the selection in the table.

ACTIVITYNAMEClearSelection=Clear selection 

ACTIVITYCATEGORYTable=Table

ACTIVITYTITLEAdd$data$in$item$=Add $data$ in $item$.

ACTIVITYMENUAdd$data$in$item$=Add $data$ in $item$

ACTIVITYDESCAddItem=Add item.

ACTIVITYNAMEAddItem=Add item

ACTIVITYCATEGORYCombobox=Combobox

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantbyusing...(ex{text"toto",key"totoKey"})-Useavariablevaluebyusing'...'(ex$data$+'+++')=You can :\n- Select or create an entry in the context\n- Use a constant by using _..._ (example: {text: "toto", key:"totoKey"})\n- Use a variable value by using '...' (example: $data$ + '+++')

ACTIVITYTITLEGetItems$item$in$data$=Get items $item$ in $data$.

ACTIVITYMENUGetItems$item$in$data$=Get items $item$ in $data$

ACTIVITYNAMEGetItems=Get items 

ACTIVITYTITLEExpand$item$=Expand $item$.

ACTIVITYMENUExpand$item$=Expand $item$

ACTIVITYDESCExpandItemcontent=Expand the content of the item.

ACTIVITYNAMEExpand=Expand

ACTIVITYCATEGORYTreeGrid=Tree Grid

PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex0)-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 0)\n- ...\n

ACTIVITYTITLEFilterin$item$=Filter in $item$.

ACTIVITYMENUFilterin$item$=Filter in $item$

ACTIVITYDESCFilterItemcontent=Filter the content of the item.

ACTIVITYNAMEFilter=Filter

ACTIVITYTITLEGetCredit$data$in$item$=Get credit $data$ in $item$.

ACTIVITYMENUGetCredit$data$in$item$=Get credit $data$ in $item$

ACTIVITYDESCGetCreditItemcontent=Get the credit item's content.

ACTIVITYNAMEGetCredit=Get credit 

ACTIVITYTITLEGetDebit$data$in$item$=Get debit $data$ in $item$.

ACTIVITYMENUGetDebit$data$in$item$=Get debit $data$ in $item$

ACTIVITYDESCGetDebitItemcontent=Get the content of the debit item.

ACTIVITYNAMEGetDebit=Get debit 

ACTIVITYTITLEGetRegionin$item$=Get the region in $item$.

ACTIVITYMENUGetRegionin$item$=Get region in $item$

ACTIVITYDESCGetRegioncontent=Get the region's content.

ACTIVITYNAMEGetRegion=Get region 

ACTIVITYCATEGORYMap=Map

ACTIVITYTITLEGetTableData'$item$'=Get the table data '$item$'.

ACTIVITYMENUGetTableData'$item$'=Get table data '$item$'

ACTIVITYDESCGetTableData.=Get the table data.

ACTIVITYNAMETableData=Table data 

PROPDESCACTIVITYNameoftheitemtoselect=The name of the item to select.

ACTIVITYTITLEGetTableRowCountin'$item$'=Get table row count in '$item$'.

ACTIVITYMENUGetTableRowCountin'$item$'=Get table row count in '$item$'

ACTIVITYDESCGetTableRowCount.=Get the table row count.

ACTIVITYNAMERowCount=Row count 

ACTIVITYTITLEGetTableRowdatain'$item$'=Get the table row data in '$item$'.

ACTIVITYMENUGetTableRowdatain'$item$'=Get table row data in '$item$'

ACTIVITYDESCGetTableRowDataByIndex.=Get the table row data by index.

ACTIVITYNAMERowData=Row data

PROPNAMEACTIVITYSourceData=Source data

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-UseaconstantRowNumberbyusing'...'(ex6)-Useavariablebyusing...(ex$data$++++)=You can :\n- Select or create an entry in the context\n- Use a constant row number by using '...' (example: 6)\n- Use a variable by using _..._ (example: $data$ + +++)

ACTIVITYTITLEIsChecked=Is checked

ACTIVITYMENUIsChecked=Is checked

ACTIVITYDESCGetToggleButton=Get the toggle button.

ACTIVITYNAMEIsChecked=Is checked

ACTIVITYCATEGORYMenu=Menu

ACTIVITYCATEGORYNavigationList=Navigation List

ACTIVITYTITLENext=Next

ACTIVITYMENUNext=Next

ACTIVITYDESCClicksNextonCarousal.=Clicks Next on the carousel.

ACTIVITYNAMENext=Next

ACTIVITYCATEGORYCarousal=Carousel

ACTIVITYTITLEPress$item$=Press $item$.

ACTIVITYMENUPress$item$=Press $item$

ACTIVITYDESCPressItem=Press item.

ACTIVITYNAMEPress=Press

ACTIVITYCATEGORYFeedContent=Feed Content

ACTIVITYTITLEPrevious=Previous

ACTIVITYMENUPrevious=Previous

ACTIVITYDESCClicksPreviousonCarousal.=Clicks Previous on the carousel.

ACTIVITYNAMEPrevious=Previous

ACTIVITYTITLESearch$data$in$item$=Search $data$ in $item$.

ACTIVITYMENUSearch$data$in$item$=Search $data$ in $item$

ACTIVITYCATEGORYSegmentButton=Segment Button

ACTIVITYTITLESelectAllin'$item$'=Select all in '$item$'.

ACTIVITYMENUSelectAllin'$item$'=Select all in '$item$'

ACTIVITYDESCSelectAllContentofaTable.=Select all the contents of a table.

ACTIVITYNAMESelectAll=Select all 

ACTIVITYTITLESelectrowin'$item$'=Select row in '$item$'.

ACTIVITYMENUSelectrowin'$item$'=Select row in '$item$'

ACTIVITYDESCSelecttherowofaTable.=Select the row of a table.

PROPDESCACTIVITYIndexoftherowtoselect.=The index of the row to select.

PROPDESCACTIVITYThisisan'expression'.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex1)-...=This is an 'expression'. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 1)\n- ...\n

ACTIVITYDESCSearchItemcontent=Search item content.

ACTIVITYNAMESuggestionSearch=Suggestion Search

ACTIVITYCATEGORYSuggestionSearchField=Suggestion Search Field

ACTIVITYTITLEUncheck=Uncheck

ACTIVITYMENUUncheck=Uncheck

ACTIVITYDESCUncheckToggleButton=Uncheck the toggle button.

ACTIVITYNAMEUnCheck=Uncheck

ACTIVITYTITLEGetselecteddatein$item$=Get selected date from $item$.

ACTIVITYMENUGetselecteddatein$item$=Get selected date from $item$.

ACTIVITYDESCReturnsselecteddatein"YYYYMMDD"format.=Returns selected date in "YYYYMMDD" format.

ACTIVITYNAMEGetDate=Get date

ACTIVITYCATEGORYGuiCtrlCalendar=GuiCtrlCalendar

ACTIVITYTITLEGetselecteddaterangein$item$=Get selected date range from $item$.

ACTIVITYMENUGetselecteddaterangein$item$=Get selected date range from $item$.

ACTIVITYDESCReturnsselecteddaterangein"YYYYMMDD"formatsplitbycomma.=Returns selected date range in "YYYYMMDD" format, with comma separator.

ACTIVITYNAMEGetDateRange=Get date range

ACTIVITYTITLESelectdatein$item$=Select date in $item$

ACTIVITYMENUSelectdatein$item$=Select date in $item$

ACTIVITYDESCSelectsdategivenin"YYYYMMDD"format.=Selects date expressed in "YYYYMMDD" format.

ACTIVITYNAMESelectDate=Select date

PROPNAMEACTIVITYDate=Date

PROPDESCACTIVITYEnterdatein"YYYYMMDD"format.=Enter date in "YYYYMMDD" format.

ACTIVITYTITLESelectdaterangein$item$=Select date range in $item$.

ACTIVITYMENUSelectdaterangein$item$=Select date range in $item$

ACTIVITYDESCSelectsdaterangegivenin"YYYYMMDD"format.=Selects date range given in "YYYYMMDD" format.

ACTIVITYNAMESelectDateRange=Select date range

PROPNAMEACTIVITYFromDate=From date

PROPDESCACTIVITYEnter"FromDate"in"YYYYMMDD"format.=Enter the From date in "YYYYMMDD" format.

PROPNAMEACTIVITYToDate=To date

PROPDESCACTIVITYEnter"ToDate"in"YYYYMMDD"format.=Enter the To date in "YYYYMMDD" format.

ACTIVITYCATEGORYGuiGridView=GuiGridView

ACTIVITYTITLEGetdatafromrow$expression$in$item$=Get data from row $expression$ in $item$

ACTIVITYMENUGetdatafromrow$expression$in$item$=Get data from GUICtrlGridView row $expression$ in $item$.

ACTIVITYDESCGetdatafromatablerow=Get data from a table row.

ACTIVITYDESCGetsallthevisiblerowspresentinatable=Gets all the visible rows present in a table.

ACTIVITYTITLECreatesessionon$page$=Create session on $page$.

ACTIVITYMENUCreatesessionon$page$=Create session on $page$

ACTIVITYDESCCreatesanewsession,whichisthenvisualizedbyanewmainwindow.=Creates a new session, which is then visualized by a new main window.

ACTIVITYNAMECreateSession=Create session

ACTIVITYCATEGORYGuiSession=GuiSession

PROPDESCACTIVITYNameofthepagetocreateanewsession.=Name of the page to create a new session for.

ACTIVITYTITLEEndtransactionon$page$=End transaction on $page$.

ACTIVITYMENUEndtransactionon$page$=End transaction on $page$

ACTIVITYDESCEndtransactiononpage=End transaction on page.

ACTIVITYNAMEEndTransaction=End transaction

PROPDESCACTIVITYNameofthepagetoendtransaction.=Name of the page to end transaction for.

ACTIVITYTITLEStarttransactionon$page$=Start transaction on $page$.

ACTIVITYMENUStarttransactionon$page$=Start transaction on $page$

ACTIVITYDESCStarttransactiononpage=Start transaction on page

ACTIVITYNAMEStartTransaction=Start transaction

PROPDESCACTIVITYNameofthepagetostarttransaction.=Name of the page to start transaction for.

PROPNAMEACTIVITYTransactionid=Transaction ID

ACTIVITYTITLEGetsApplicationServerfromSessionInfoin$page$=Gets the application server from SessionInfo in $page$.

ACTIVITYMENUGetsApplicationServerfromSessionInfoin$page$=Gets application server from SessionInfo in $page$

ACTIVITYDESCReturnsApplicationServerfromSessionInfo.=Returns the application server from SessionInfo.

ACTIVITYNAMEGetApplicationServer=Get application server

PROPDESCACTIVITYNameofthepage.=Name of the page.

ACTIVITYTITLEGetsClientNamefromSessionInfoin$page$=Gets client name from SessionInfo in $page$

ACTIVITYMENUGetsClientNamefromSessionInfoin$page$=Gets client name from SessionInfo in $page$

ACTIVITYDESCReturnsClientfromSessionInfo.=Returns client from SessionInfo.

ACTIVITYNAMEGetClientName=Get client name

ACTIVITYTITLEGetsProgramfromSessionInfoin$page$=Gets program from SessionInfo in $page$

ACTIVITYMENUGetsProgramfromSessionInfoin$page$=Gets program from SessionInfo in $page$

ACTIVITYDESCReturnsProgramfromSessionInfo.=Returns program from SessionInfo.

ACTIVITYNAMEGetProgram=Get program

ACTIVITYTITLEGetsScreenNumberfromSessionInfoin$page$=Gets screen number from SessionInfo in $page$

ACTIVITYMENUGetsScreenNumberfromSessionInfoin$page$=Gets screen number from SessionInfo in $page$

ACTIVITYDESCReturnsScreenNumberfromSessionInfo.=Returns screen number from SessionInfo.

ACTIVITYNAMEGetScreenNumber=Get screen number

ACTIVITYTITLEGetsSessionNumberfromSessionInfoin$page$=Gets session number from SessionInfo in $page$

ACTIVITYMENUGetsSessionNumberfromSessionInfoin$page$=Gets session number from SessionInfo in $page$

ACTIVITYDESCReturnsSessionNumberfromSessionInfo.=Returns session number from SessionInfo.

ACTIVITYNAMEGetSessionNumber=Get session number

ACTIVITYTITLEGetsSystemNamefromSessionInfoin$page$=Gets system name from SessionInfo in $page$

ACTIVITYMENUGetsSystemNamefromSessionInfoin$page$=Gets system name from SessionInfo in $page$

ACTIVITYDESCReturnsSystemNamefromSessionInfo.=Returns system name from SessionInfo.

ACTIVITYNAMEGetSystemName=Get system name

ACTIVITYTITLEGetsSystemNumberfromSessionInfoin$page$=Gets system number from SessionInfo in $page$

ACTIVITYMENUGetsSystemNumberfromSessionInfoin$page$=Gets system number from SessionInfo in $page$

ACTIVITYDESCReturnsSystemNumberfromSessionInfo.=Returns system number from SessionInfo.

ACTIVITYNAMEGetSystemNumber=Get system number

ACTIVITYTITLEGetsTransactionfromSessionInfoin$page$=Gets transaction from SessionInfo in $page$

ACTIVITYMENUGetsTransactionfromSessionInfoin$page$=Gets transaction from SessionInfo in $page$

ACTIVITYDESCReturnsTransactionfromSessionInfo.=Returns transaction from SessionInfo.

ACTIVITYNAMEGetTransaction=Get transaction

ACTIVITYTITLEGetsUserNamefromSessionInfoin$page$=Gets user name from SessionInfo in $page$

ACTIVITYMENUGetsUserNamefromSessionInfoin$page$=Gets user name from SessionInfo in $page$

ACTIVITYDESCReturnsUserNamefromSessionInfo.=Returns user name from SessionInfo.

ACTIVITYNAMEGetUserName=Get user name

ACTIVITYTITLEGetmessageIDfrom$item$=Get message ID from $item$

ACTIVITYMENUGetmessageIDfrom$item$=Get message ID from $item$

ACTIVITYDESCGetsthenameofthemessageclassusedintheABAPmessagecall.=Gets the name of the message class used in the ABAP message call.

ACTIVITYNAMEGetMessageID=Get message ID

ACTIVITYCATEGORYGuiStatusBar=GuiStatusBar

ACTIVITYTITLEGetmessagenumberfrom$item$=Get message number from $item$

ACTIVITYMENUGetmessagenumberfrom$item$=Get message number from $item$

ACTIVITYDESCGetsthenameofthemessagenumberusedintheABAPmessagecall.Itwillusuallybeanumber,butthisisnotenforcedbythesystem.=Gets the name of the message class used in the ABAP message call. It will usually be a number, but this is not enforced by the system.

ACTIVITYNAMEGetMessageNumber=Get message number

ACTIVITYTITLEGetmessagetypefrom$item$=Get message type from $item$

ACTIVITYMENUGetmessagetypefrom$item$=Get message type from $item$

ACTIVITYDESCGetsmessagetypei.eSuccess,Warning,Error,AbortorInformation=Gets message type i.e Success, Warning, Error, Abort or Information

ACTIVITYNAMEGetMessageType=Get message type

ACTIVITYTITLEDeselectallVisiblerowsin$item$=Deselect all visible rows in $item$

ACTIVITYMENUDeselectallVisiblerowsin$item$=Deselect all visible rows in $item$

ACTIVITYDESCDeselectallvisiblerows=Deselect all visible rows

ACTIVITYNAMEDeselectallvisibleRows=Deselect all visible rows

ACTIVITYCATEGORYGuiTableControl=GuiTableControl

ACTIVITYTITLEDeselectrow$expression$in$item$=Deselect row $expression$ in $item$

ACTIVITYMENUDeselectrow$expression$in$item$=Deselect row $expression$ in $item$

ACTIVITYDESCDeselectarowgivenabsoluterownumbervalue=Deselect a row given the absolute row number value

ACTIVITYNAMEDeselectagivenRow=Deselect a given row

ACTIVITYTITLEDeselectvisiblerow$expression$in$item$=Deselect visible row $expression$ in $item$

ACTIVITYMENUDeselectvisiblerow$expression$in$item$=Deselect visible row $expression$ in $item$

ACTIVITYDESCDeselectavisiblerow,rownumberscanbefrom0tovisibleRowCount-1=Deselect a visible row. Row numbers can be from 0 to visibleRowCount - 1

ACTIVITYNAMEDeselectvisibleRow=Deselect visible row

ACTIVITYTITLEGetcolumnnamesfrom$item$=Get column names from $item$

ACTIVITYMENUGetcolumnnamesfrom$item$=Get column names from $item$

ACTIVITYDESCGetsallthecolumnnamespresentinGuiTableControlcomponent=Gets all the column names present in the GuiTableControl component

ACTIVITYNAMEGetColumnNames=Get column names

ACTIVITYTITLEGetvisiblerowcountin$item$=Get visible row count in $item$

ACTIVITYMENUGetvisiblerowcountin$item$=Get visible row count in $item$

ACTIVITYDESCGetsvisiblerowcountinatable=Gets visible row count in a table

ACTIVITYNAMEGetVisiblerowcount=Get visible row count

ACTIVITYTITLEScrolltonextsetofrowsin$item$=Scroll to next set of rows in $item$

ACTIVITYMENUScrolltonextsetofrowsin$item$=Scroll to next set of rows in $item$

ACTIVITYDESCScrolltonextpageinGuiTableControl=Scroll to next page in GuiTableControl

ACTIVITYNAMEScrolltonextpage=Scroll to next page

PROPDESCACTIVITYNameoftheitemtoperformscrolloperation.=Name of the item to perform scroll operation on.

ACTIVITYTITLEScrolltoprevioussetofrowsin$item$=Scroll to previous set of rows in $item$

ACTIVITYMENUScrolltoprevioussetofrowsin$item$=Scroll to previous set of rows in $item$

ACTIVITYDESCScrolltopreviouspageinGuiTableControl=Scroll to previous page in GuiTableControl

ACTIVITYNAMEScrolltopreviouspage=Scroll to previous page

ACTIVITYTITLESelectAllvisiblerowsin$item$=Select all visible rows in $item$

ACTIVITYMENUSelectAllvisiblerowsin$item$=Select all visible rows in $item$

ACTIVITYDESCSelectallvisiblerows=Select all visible rows

ACTIVITYNAMESelectallvisibleRows=Select all visible rows

ACTIVITYDESCSelectarowgivenabsoluterownumbervalue=Select a row given the absolute row number value

ACTIVITYNAMESelectagivenRow=Select a given row

ACTIVITYTITLESelectvisiblerow$expression$in$item$=Select visible row $expression$ in $item$

ACTIVITYMENUSelectvisiblerow$expression$in$item$=Select visible row $expression$ in $item$

ACTIVITYDESCSelectavisiblerow,rownumberscanbefrom0tovisibleRowCount-1=Select a visible row. Row numbers can be from 0 to visibleRowCount - 1

ACTIVITYNAMESelectavisibleRow=Select a visible row

ACTIVITYTITLEChecktheCheckBoxIteminposition$pos$ofnode$expression$in$item$=Check the checkbox item in position $pos$ of node $expression$ in $item$.

ACTIVITYMENUChecktheCheckBoxIteminposition$pos$ofnode$expression$in$item$=Check the checkbix item in position $pos$ of node $expression$ in $item$

ACTIVITYDESCSetsthecheckboxnodeitem'sstatustotrueinGUIColumnTree=Sets the checkbox node item's status to true in GUI Column Tree.

ACTIVITYCATEGORYGuiTree=GuiTree

PROPNAMEACTIVITYNodeKey=Node key

PROPNAMEACTIVITYItemPosition(Column)=Item position(column)

ACTIVITYTITLEDoubleclicknodeofkey$expression$in$item$=Double click node of key $expression$ in $item$.

ACTIVITYMENUDoubleclicknodeofkey$expression$in$item$=Double click node of key $expression$ in $item$.

ACTIVITYDESCDoubleClickthenodeusingkeyprovided=Double-click the node using the key provided.

ACTIVITYNAMEDoubleClicknode=Double-click node

ACTIVITYTITLEClickitemlinkinposition$pos$ofnode$nodeKey$in$item$=Click item link in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUClickitemlinkinposition$pos$ofnode$nodeKey$in$item$=Click item link in position $pos$ of node $nodeKey$ in $item$
ACTIVITYDESCClickitemlinkofanodeinGUIColumnTree=Click item link of a node in GUI Column Tree

ACTIVITYNAMEClickNodeItemLink=Click node item link

ACTIVITYTITLECollapsenodeofkey$expression$in$item$=Collapse node of key $expression$ in $item$

ACTIVITYMENUCollapsenodeofkey$expression$in$item$=Collapse node of key $expression$ in $item$

ACTIVITYDESCCollapsethenodeusingkeyprovided=Collapse the node using the key provided

ACTIVITYNAMECollapsenode=Collapse node

ACTIVITYTITLEDoubleClickIteminposition$pos$ofnode$nodeKey$in$item$=Double-click item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUDoubleClickIteminposition$pos$ofnode$nodeKey$in$item$=Double-click item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCDoubleclickitemofanodeinGUIColumnTree=Double-click item of a node in GUI Column Tree

ACTIVITYNAMEDoubleClickNodeItem=Double-click node item

ACTIVITYTITLEExpandnodeofkey$expression$in$item$=Expand node of key $expression$ in $item$

ACTIVITYMENUExpandnodeofkey$expression$in$item$=Expand node of key $expression$ in $item$

ACTIVITYDESCExpandsthenodeusingkeyprovided=Expands the node using the key provided

ACTIVITYNAMEExpandnode=Expand node

ACTIVITYTITLEGetItemtextinposition$pos$ofnode$nodeKey$in$item$=Get item text in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUGetItemtextinposition$pos$ofnode$nodeKey$in$item$=Get item text in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCGetitem'stextofanodeinGUIColumnTree=Get item's text of a node in GUI Column Tree

ACTIVITYNAMEGetNodeItemText=Get node item text

ACTIVITYTITLEGetNodekeyofpath$nodePath$in$item$=Get node key of path $nodePath$ in $item$

ACTIVITYMENUGetNodekeyofpath$nodePath$in$item$=Get node key of path $nodePath$ in $item$

ACTIVITYDESCGetthenodekeyusingnode'spath=Get the node key using the node's path

ACTIVITYNAMEGetNodeKeybyPath=Get node key by path

PROPNAMEACTIVITYNodePath=Node path

ACTIVITYTITLEGetNodekeyoftext$nodeText$in$item$=Get node key of text $nodeText$ in $item$

ACTIVITYMENUGetNodekeyoftext$nodeText$in$item$=Get node key of text $nodeText$ in $item$

ACTIVITYDESCGetthenodekeyusingnode'stext=Get the node key using node's text

ACTIVITYNAMEGetNodeKeybyText=Get node Key by text

PROPNAMEACTIVITYNodeText=Node text

ACTIVITYTITLEGetCheckboxstateofiteminposition$pos$ofnode$nodeKey$in$item$=Get checkbox state of item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUGetCheckboxstateofiteminposition$pos$ofnode$nodeKey$in$item$=Get checkbox state of item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCGetcheckboxitemstateofanodeinGUIColumnTree=Get checkbox item state of a node in GUI Column Tree

ACTIVITYNAMEGetNodeItemCheckboxState=Get node item checkbox state

ACTIVITYTITLEPressItemButtoninposition$pos$ofnode$nodeKey$in$item$=Press item button in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUPressItemButtoninposition$pos$ofnode$nodeKey$in$item$=Press item button in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCPressitembuttonofanodeinGUIColumnTree=Press item button of a node in GUI Column Tree

ACTIVITYNAMEPressNodeItemButton=Press node item button

ACTIVITYTITLESelectnodeofkey$expression$in$item$=Select node of key $expression$ in $item$

ACTIVITYMENUSelectnodeofkey$expression$in$item$=Select node of key $expression$ in $item$

ACTIVITYDESCSelectsthenodeusingkeyprovided=Selects the node using key provided

ACTIVITYNAMESelectnode=Select node

PROPNAMEACTIVITYSelect/Unselect(true/false)=Select/unselect (true/false)

ACTIVITYTITLESelectContextMenuIteminposition$position$ofnode$nodeKey$in$item$=Select context menu item in position $position$ of node $nodeKey$ in $item$

ACTIVITYMENUSelectContextMenuIteminposition$position$ofnode$nodeKey$in$item$=Select context menu item in position $position$ of node $nodeKey$ in $item$

ACTIVITYDESCSelectcontextmenuitemofanodebyposition=Select context menu item of a node by position

ACTIVITYNAMESelectContextMenuItembyPosition=Select context menu item by position

PROPNAMEACTIVITYMenuItemPosition=Menu item position

PROPNAMEACTIVITYColumnPosition=Column position

ACTIVITYTITLESelectContextMenuItemwithtext$text$ofnode$nodeKey$in$item$=Select context menu item with text $text$ of node $nodeKey$ in $item$

ACTIVITYMENUSelectContextMenuItemwithtext$text$ofnode$nodeKey$in$item$=Select context menu item with text $text$ of node $nodeKey$ in $item$

ACTIVITYDESCSelectcontextmenuitemofanodebytext=Select context menu item of a node by text

ACTIVITYNAMESelectContextMenuItembyText=Select context menu item by text

PROPNAMEACTIVITYMenuItemText=Menu item text

ACTIVITYTITLEGettheselectednodein$item$=Get the selected node in $item$

ACTIVITYMENUGettheselectednodein$item$=Get the selected node in $item$

ACTIVITYDESCGettheselectednodekey=Get the selected node key

ACTIVITYNAMEGetSelectedNode=Get selected node

ACTIVITYTITLESelectIteminposition$pos$ofnode$nodeKey$in$item$=Select item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUSelectIteminposition$pos$ofnode$nodeKey$in$item$=Select item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCSelectitemofanodeinGUIColumnTree=Select item of a node in GUI Column Tree

ACTIVITYNAMESelectNodeItem=Select node item

ACTIVITYTITLEUnChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Uncheck the checkbox item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUUnChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Uncheck the checkbox item  in position $pos$ of node $nodeKey$ in $item$

ACTIVITYTITLEChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Check the checkbox item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYMENUChecktheCheckBoxIteminposition$pos$ofnode$nodeKey$in$item$=Check the checkbox item in position $pos$ of node $nodeKey$ in $item$

ACTIVITYDESCSetsthecheckboxnodeitem'sstatustofalseinGUIColumnTree=Sets the checkbox node item's status to false in GUI Column Tree

PROPNAMEACTIVITYWheretoStoreResult=Where to store result

PROPDESCACTIVITYThisisan'expression'.Use--$data$tostoreinthecontext(Ex$data$+'+++')-variablenametostoreinavariable(ExvarmyVar)-...=This is an 'expression'. Use -\n- $data$ to store in the context (example: $data$ + '+++')\n- variable name to store in a variable (example: var myVar)\n- 

PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myValue')-...=This is an 'expression'. Use -\n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'myValue')\n- ...

ACTIVITYTITLESetAutomationConnectionon'$page$'=Set automation connection on '$page$'

ACTIVITYMENUSetAutomationConnectionon'$page$'=Set automation connection on '$page$'

ACTIVITYDESCSetAutomationConnectiononpage=Set automation connection on page

ACTIVITYNAMESetAutomationConnection=Set automation connection

ACTIVITYCATEGORYGuiMainWindow=GuiMainWindow

PROPDESCACTIVITYNameofthepagetosetautomationconnection.=Name of the page to set automation connection on.

ACTIVITYTITLEMaximize'$page$'=Maximize '$page$'.

ACTIVITYMENUMaximize'$page$'=Maximize '$page$'

ACTIVITYDESCMaximize=Maximize

ACTIVITYNAMEMaximizePage=Maximize page

ACTIVITYTITLEMinimize'$page$'=Minimize '$page$'

ACTIVITYMENUMinimize'$page$'=Minimize '$page$'

ACTIVITYDESCMinimize=Minimize

ACTIVITYNAMEMinimizePage=Minimize page

ACTIVITYTITLERestore'$page$'=Restore '$page$'

ACTIVITYMENURestore'$page$'=Restore '$page$'

ACTIVITYDESCRestore=Restore

ACTIVITYNAMERestorePage=Restore page

ACTIVITYTITLEGetsmaximumverticalscrolloffsetin'$item$'=Gets maximum vertical scroll offset in '$item$'

ACTIVITYMENUGetsmaximumverticalscrolloffsetin'$item$'=Gets maximum vertical scroll offset in '$item$'

ACTIVITYDESCGetsmaximumverticalscrolloffsetinaGuiTableControl=Gets maximum vertical scroll offset in a GuiTableControl

ACTIVITYNAMEGetsmaximumverticalscrolloffset=Gets maximum vertical scroll offset

PROPDESCACTIVITYThisisanexpression.Use-$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(Ex'myvalue')=This is an expression. Use : \n- $data$ to get data from the context (example: $data$ + '+++')\n- '...' to set a constant value (example: 'myvalue')

ACTIVITYTITLEGetsthecurrentpositionofScrollbarin'$item$'=Gets the current position of scrollbar in '$item$'

ACTIVITYMENUGetsthecurrentpositionofScrollbarin'$item$'=Gets the current position of scrollbar in '$item$'

ACTIVITYDESCGetstheverticalcurrentpositionofScrollbar=Gets the vertical current position of scrollbar

ACTIVITYNAMEGetstheverticalcurrentpositionofScrollbar=Gets the vertical current position of scrollbar

ACTIVITYTITLEScrolldownbyonerowof'$item$'=Scroll down by one row of '$item$'

ACTIVITYMENUScrolldownbyonerowof'$item$'=Scroll down by one row of '$item$'

ACTIVITYDESCScrolldownbyonerowinGuiTableControl=Scroll down by one row in GuiTableControl

ACTIVITYNAMEScrolldownbyonerow=Scroll down by one row

ACTIVITYTITLEScrolltoa'$expression$'positionfrom'$item$'=Scroll to a '$expression$' position from '$item$'

ACTIVITYMENUScrolltoa'$expression$'positionfrom'$item$'=Scroll to a '$expression$' position from '$item$'

ACTIVITYDESCScrolltoaparticularpositioninGuiTableControl=Scroll to a particular position in GuiTableControl

ACTIVITYNAMEScrolltoaparticularposition=Scroll to a particular position

PROPNAMEACTIVITYPositioninnumber=Position in number

ACTIVITYTITLEScrollupbyonerowof'$item$'=Scroll up by one row of '$item$'

ACTIVITYMENUScrollupbyonerowof'$item$'=Scroll up by one row of '$item$'

ACTIVITYDESCScrollupbyonerowinGuiTableControl=Scroll up by one row in GuiTableControl

ACTIVITYNAMEScrollupbyonerow=Scroll up by one row

ACTIVITYTITLESetCaretPositionon'$item$'=Set caret position on '$item$'

ACTIVITYMENUSetCaretPositionon'$item$'=Set caret position on '$item$'

ACTIVITYDESCSetCaretPositiononTextField=Set caret position on text field

ACTIVITYNAMESetCaretPosition=Set caret position

ACTIVITYCATEGORYGuiTextField=GuiTextField

PROPDESCACTIVITYNameoftheItemtosetcaretposition.=Name of the item to set caret position on.

PROPNAMEACTIVITYCaretPosition=Caret position

ACTIVITYTITLEAddAppointment$data$in$item$=Add appointment $data$ in $item$

ACTIVITYMENUAddAppointment$data$in$item$=Add appointment $data$ in $item$

ACTIVITYDESCAddNewAppointment=Add new appointment

ACTIVITYNAMEaddItem=Add item

ACTIVITYCATEGORYCalendar=Calendar

PROPNAMEACTIVITYAppointmentTitle=Appointment title

PROPDESCACTIVITYEnterappointmentTitle.=Enter appointment title.

PROPNAMEACTIVITYAppointmentSubtitle=Appointment subtitle

PROPDESCACTIVITYEnterappointmentdetails.=Enter appointment details.

PROPNAMEACTIVITYAppointmentType=Appointment type

PROPDESCACTIVITYChooseappointmenttypefromthelist.=Choose appointment type from the list.

PROPNAMEACTIVITYStartDate=Start date

PROPDESCACTIVITYProvideAvalidstartdate,Theformatlookslikethis--"Year,Month,Day,Hour,Minute,Second".-IfyouwantafulldayeventthenkeepHourMinuteSecvaluezero.-(ex"2020,07,20,03,00,00")...=Provide a valid start date, The format is - \n- "Year, Month, Day, Hour, Minute, Second". \n- For a full-day event, keep the Hour Minute Sec value zero. \n- (example: "2020, 07, 20, 03, 00, 00")\n...

PROPNAMEACTIVITYEndDate=End date

PROPDESCACTIVITYProvideAvalidenddate,Theformatlookslikethis--"Year,Month,Day,Hour,Minute,Second".-IfyouwantafulldayeventthenkeepHourMinuteSecvaluezero.-(ex"2020,07,20,04,00,00")...=Provide a valid end date, The format is \n- "Year, Month, Day, Hour, Minute, Second". \n- For a full-day event, keep Hour Minute Sec value zero. \n- (example, "2020, 07, 20, 04, 00, 00")\n...

PROPNAMEACTIVITYCreationStatus=Creation status

PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-variablenametostoreinavariable(ExvarmyVar)-...=This is an 'expression'. Use -\n- $data$ to get data from the context (example: $data$ + '+++')\n- variable name to store in a variable (example: var myVar)\n- ...

ACTIVITYTITLEEnumerateAccounts=Enumerate accounts

ACTIVITYMENUEnumerateAccounts=Enumerate accounts

ACTIVITYDESCEnumeratetheaccountsofthecurrentOutlookinstance.=Enumerate the accounts of the current Outlook instance.

ACTIVITYNAMEEnumerateAccounts=Enumerate accounts

ACTIVITYCATEGORYAccount=Account

PROPDESCACTIVITYNameofthevariableofdatacontexttouseforthisaction.=Name of the variable from the data context to use for this action.

ACTIVITYTITLEAcceptAppointment=Accept appointment

ACTIVITYMENUAcceptAppointment=Accept appointment

ACTIVITYDESCAcceptanappointment.=Accept an appointment.

ACTIVITYNAMEAcceptAppointment=Accept appointment

ACTIVITYCATEGORYAppointment=Appointment

ACTIVITYTITLECurrentAppointmentExisting?=Does current appointment exist?

ACTIVITYMENUCurrentAppointmentExisting?=Does current appointment exist?

ACTIVITYDESCReturnstrueofthecurrentcontextappointmentisexisting,falseotherwise.=Returns true if the current context appointment exists, false otherwise.

ACTIVITYNAMECurrentAppointmentExisting?=Does current appointment exist?

ACTIVITYCATEGORYContext=Context

PROPDESCACTIVITYNameofthevariableofthedatacontexttouseforthisaction.=Name of the variable of the data context to use for this action.

ACTIVITYTITLEAppointmentContextFilter=Appointment context filter

ACTIVITYMENUAppointmentContextFilter=Appointment context filter

ACTIVITYDESCPerformaselectionofappointmentswhichcanbeusedlatertoworkontheitems.=Perform a selection of appointments that can be used later to work on the items.

ACTIVITYNAMEAppointmentContextFilter=Appointment context filter

PROPNAMEACTIVITYstartAfterSpecificDate=Start after specific date

PROPDESCACTIVITYWriteaDateTimeinformationtoindicatefromwhenanappointmenthadtostart.Notethatthisparameterdependsofyourcurrentculture.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Write a date/time information to indicate that the appointment must start after a specific date. Note that this parameter depends on  the culture. /nEnglish="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00", and so on.

PROPNAMEACTIVITYendBeforeSpecificDate=End before specific date

PROPDESCACTIVITYWriteaDateTimeinformationtoindicatebeforewhenanappointmenthadtofinish.Notethatthisparameterdependsofyourcurrentculture.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Write a date/time information to indicate that the appointment must end before a specific date. Note that the value depends on the  culture. /nEnglish="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00", and so on.

PROPNAMEACTIVITYsubjectContains=Subject contains

PROPDESCACTIVITYWriteoneorasequenceofwordsandiftheyarefindintheappointmentssubject,theappointmentswillbeselected.=Enter one or more words and if that string is found in the appointments' subject, the appointments will be selected.

PROPNAMEACTIVITYsubjectEqualTo=Subject equal to

PROPDESCACTIVITYWriteasequenceofwordsandifthisexactsequenceisfindintheappointmentssubject,theappointmentswillbeselected.=Enter a phrase and if the exact phrase is found in the appointments' subject, the appointments will be selected.

PROPNAMEACTIVITYdurationHigherThan=Duration higher than

PROPDESCACTIVITYDurationfromwhichtheappointmentswillbeselected.=Duration from which the appointments will be selected.

PROPNAMEACTIVITYdurationLowerThan=Duration lower than

PROPDESCACTIVITYDurationbelowwhichtheappointmentswillbeselected.=Duration before which the appointments will be selected.

PROPNAMEACTIVITYincludeRecurrent=Include recurrent

PROPDESCACTIVITYIncludetherecurrentemailsinthefiltering.=Include the recurrent emails in the filtering.

ACTIVITYTITLESelectFirstAppointment=Select first appointment

ACTIVITYMENUSelectFirstAppointment=Select first appointment

ACTIVITYDESCDefinethecurrentappointmentasthefirstappointmentofthefilteredappointments.=Define the current appointment as the first of the filtered appointments.

ACTIVITYNAMESelectFirstAppointment=Select first appointment

ACTIVITYTITLESelectLastAppointment=Select last appointment

ACTIVITYMENUSelectLastAppointment=Select last appointment

ACTIVITYDESCDefinethecurrentappointmentasthelastappointmentofthefilteredappointments.=Define the current appointment as the last of the filtered appointments.

ACTIVITYNAMESelectLastAppointment=Select last appointment

ACTIVITYTITLESelectNextAppointment=Select next appointment

ACTIVITYMENUSelectNextAppointment=Select next appointment

ACTIVITYDESCDefinethecurrentappointmentasthenextappointmentaccordingtothecurrentappointmentandthefilteredappointments.=Define the current appointment as the next one according to the current appointment and the filtered appointments.

ACTIVITYNAMESelectNextAppointment=Select next appointment

ACTIVITYTITLESelectPreviousAppointment=Select previous appointment

ACTIVITYMENUSelectPreviousAppointment=Select previous appointment

ACTIVITYDESCDefinethecurrentappointmentasthepreviousappointmentaccordingtothecurrentappointmentandthefilteredappointments.=Define the current appointment as the previous one according to the current appointment and the filtered appointments.

ACTIVITYNAMESelectPreviousAppointment=Select previous appointment

ACTIVITYTITLECreateAppointment=Create appointment

ACTIVITYMENUCreateAppointment=Create appointment

ACTIVITYDESCCreateAppointment.Thegeneratedappointmentitemwillbesetascurrentappointmentinthe'appointmentcontext'afterwardsifthepropertyupdateContextissettotrue.=Create appointment. The generated appointment item will be set as current appointment in the 'appointment context' afterwards if the property updateContext is set to true.

ACTIVITYNAMECreateAppointment=Create appointment

PROPNAMEACTIVITYsubject=Subject

PROPDESCACTIVITYSubjectoftheappointment.=Subject of the appointment.

PROPNAMEACTIVITYbody=Body

PROPDESCACTIVITYBodyoftheappointment.Tojumpalineuse\r=Body of the appointment. To start a new line use \r\n

PROPNAMEACTIVITYlocation=Location

PROPDESCACTIVITYLocationoftheappointment.=Location of the appointment.

PROPNAMEACTIVITYstartDateTime=Start date time

PROPDESCACTIVITYDateandTimetostarttheappointment.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the appointment. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

PROPNAMEACTIVITYduration=Duration

PROPDESCACTIVITYDurationinminuteoftheappointment.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.=Duration of the appointment in minutes. Enter either the Start date time and the duration, or the Start date time and the End date time.

PROPNAMEACTIVITYendDateTime=End date time

PROPDESCACTIVITYDateandTimetoendtheappointment.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the appointment. Enter either the Start date time and the duration, or the Start date time and the End date time. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

PROPNAMEACTIVITYimportance=Importance

PROPDESCACTIVITYImportanceoftheappointment.=Importance of the appointment.

PROPNAMEACTIVITYbusyStatus=Busy status

PROPDESCACTIVITYBusystatusoftheappointment.=Busy status of the appointment.

PROPNAMEACTIVITYcategory=Category

PROPDESCACTIVITYCategorytousefortheappointment.e.g."MyCategory"=Category to use for the appointment, example: "MyCategory"

PROPNAMEACTIVITYsensitivity=Sensitivity

PROPDESCACTIVITYSensitivitytousefortheappointment.=Sensitivity to use for the appointment.

PROPNAMEACTIVITYdisplayOnly=Display only

PROPDESCACTIVITYDisplayonlytheappointmentbutdon'tsendit.Useitonlyforattendedscenario.=Display the appointment but don't send it. Use it only in attended scenarios.

PROPNAMEACTIVITYupdateContext=Update context

PROPDESCACTIVITYIftrue,the'appointmentcontext'isautomaticallyupdatedwiththenewappointmentwhichisgoingtobecreated.Nosearchwon'tbenecessarytoworkwithit.=If true, the 'appointment context' is automatically updated with the new appointment to be created. No search is necessary to work with it.

ACTIVITYTITLEDeclineAppointment=Decline appointment

ACTIVITYMENUDeclineAppointment=Decline appointment

ACTIVITYDESCDeclineanappointment.=Decline an appointment.

ACTIVITYNAMEDeclineAppointment=Decline appointment

ACTIVITYTITLEDeleteAppointment=Delete appointment

ACTIVITYMENUDeleteAppointment=Delete appointment

ACTIVITYDESCDeletethecurrentappointmentdefinedintheappointmentcontext'.=Delete the current appointment defined in the appointment context.

ACTIVITYNAMEDeleteAppointment=Delete appointment

ACTIVITYTITLEForwardAppointment=Forward the appointment.

ACTIVITYMENUForwardAppointment=Forward appointment

ACTIVITYDESCForwardcurrentcontextappointment.=Forward current context appointment.

ACTIVITYNAMEForwardAppointment=Forward appointment

PROPNAMEACTIVITY"To"Recipients="To" recipients

PROPDESCACTIVITYRecipientsTo.Therecipientshavetobeseparatedbysemicolon.e.g."email1@factory.com;email2@factory.com;email3@factory.com".Ifyouareusingactivedirectory,"FirstName1LastName1;FirstName2LastName2;FirstName3LastName3"canbeusedinsteadoftheemail=Recipients must be separated by semicolons, such as "email1@factory.com; email2@factory.com; email3@factory.com". If you are using Active Directory, "FirstName1 LastName1; FirstName2 LastName2; FirstName3 LastName3" can be used instead of the email addresses.

PROPNAMEACTIVITY"Cc"Recipients="CC" recipients

PROPDESCACTIVITYRecipientsCc.Therecipientshavetobeseparatedbysemicolon.e.g."email4@factory.com;email5@factory.com".Ifyouareusingactivedirectory,"FirstName4LastName4;FirstName5LastName5"canbeusedinsteadoftheemailaddresses.=Recipients must be separated by semicolons, such as  "email4@factory.com; email5@factory.com". If you are using Active Directory, "FirstName4 LastName4; FirstName5 LastName5" can be used instead of the email addresses.

PROPNAMEACTIVITY"Bcc"Recipients="BCC" recipients

PROPDESCACTIVITYRecipientsBcc.Therecipientshavetobeseparatedbysemicolon.e.g."email6@factory.com".Ifyouareusingactivedirectory,"FirstName6LastName6"canbeusedinsteadoftheemailaddresses.=Recipients must be separated by semicolons, such as  "email6@factory.com; email7@factory.com". If you are using Active Directory, "FirstName6 LastName6; FirstName7 LastName7" can be used instead of the email addresses.

PROPNAMEACTIVITYDisplayOnly=Display only

PROPDESCACTIVITYDisplayonlytheforwardedemailbutdon'tsendit.Useitonlyforattendedscenario.=Display the forwarded email but don't send it. Use it only in attended scenarios.

ACTIVITYTITLEGetInformationFromTimeSlot=Get information from time slot

ACTIVITYMENUGetInformationFromTimeSlot=Get information from time slot

ACTIVITYDESCGetappointmentsinformationfromtimeslot.=Get appointment information from time slot.

ACTIVITYNAMEGetInformationFromTimeSlot=Get information from time slot

ACTIVITYCATEGORYHelper=Helper

PROPDESCACTIVITYDateandTimetostartthetimeslot.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the time slot. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00"

PROPDESCACTIVITYDateandTimetoendthetimeslot.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the time slot. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/nFrench="25/12/20 16:30:00"

ACTIVITYTITLEGetStatus=Get status

ACTIVITYMENUGetStatus=Get status

ACTIVITYDESCGetstatusofthecurrentcontextappointment.=Get status of the current context appointment.

ACTIVITYNAMEGetStatus=Get status

ACTIVITYTITLEUpdateAppointment=Update appointment

ACTIVITYMENUUpdateAppointment=Update appointment

ACTIVITYDESCUpdatecurrentcontextappointment.=Update current context appointment.

ACTIVITYNAMEUpdateAppointment=Update appointment

ACTIVITYTITLECreateMeeting=Create meeting

ACTIVITYMENUCreateMeeting=Create meeting

ACTIVITYDESCCreateMeeting.=Create meeting.

ACTIVITYNAMECreateMeeting=Create meeting

ACTIVITYCATEGORYMeeting=Meeting

PROPDESCACTIVITYSubjectofthemeeting.=Subject of the meeting.

PROPDESCACTIVITYBodyofthemeeting.Tojumpalineuse\r=Body of the meeting. To start a new line use \r\n

PROPDESCACTIVITYLocationofthemeeting.=Location of the meeting.

PROPDESCACTIVITYDateandTimetostartthemeeting.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to start the meeting. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

PROPDESCACTIVITYDurationinminuteofthemeeting.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.=Duration of the meeting in minutes. Enter either the Start date time and the duration, or the Start date time and the End date time.

PROPDESCACTIVITYDateandTimetoendthemeeting.FilleitherstartDateTimeanddurationorstartDateTimeandendDateTime.Notethatthevaluedependsofyourcurrentculture.English"12/25/2043000PM",French"25/12/20163000",etc.=Date and time to end the appointment. Enter either the Start date time and the duration, or the Start date time and the End date time. Note that the value depends on the culture./n English="12/25/20 4:30:00 PM"/n French="25/12/20 16:30:00"

PROPNAMEACTIVITYrequiredAttendees=Required attendees

PROPDESCACTIVITYDefinerecipientsofthemeeting.=Define recipients of the meeting.

PROPNAMEACTIVITYoptionalAttendees=Optional attendees

PROPDESCACTIVITYDefineoptionalrecipientsofthemeeting.=Define optional recipients of the meeting.

PROPNAMEACTIVITYresources=Resources

PROPDESCACTIVITYDefineresourcesofthemeeting.=Define resources of the meeting.

PROPDESCACTIVITYImportanceofthemeeting.=Importance of the meeting.

PROPNAMEACTIVITYorganizer=Organizer

PROPDESCACTIVITYOrganizerofthemeeting.=Organizer of the meeting.

PROPDESCACTIVITYBusystatusofthemeeting.=Busy status of the meeting.

PROPNAMEACTIVITYreminderSet=Set reminder

PROPDESCACTIVITYTruetoactivatereminder,falsetodon'tactivateit.=True to activate a reminder, false for no reminder.

PROPNAMEACTIVITYreminderMinutesBeforeStart=Reminder minutes before start

PROPDESCACTIVITYDefineminutestoconfigurethereminder.=Define minutes to configure the reminder.

PROPDESCACTIVITYCategorytouseforthemeeting.e.g."MyCategory"=Category to use for the meeting, such as "MyCategory"

PROPDESCACTIVITYSensitivitytouseforthemeeting.=Sensitivity to use for the meeting.

PROPDESCACTIVITYDisplayonlythemeetingbutdon'tsendit.Useitonlyforattendedscenario.=Display the meeting but don't send it. Use it only in attended scenarios.

ACTIVITYTITLEEnumerateStores=Enumerate stores

ACTIVITYMENUEnumerateStores=Enumerate stores

ACTIVITYDESCEnumeratethestoresofthecurrentOutlookinstance.=Enumerate the stores of the current Outlook instance.

ACTIVITYNAMEEnumerateStores=Enumerate stores

ACTIVITYCATEGORYStore=Store

PROPNAMEACTIVITYWheretostoreResult=Where to store result

ACTIVITYTITLEAddNewWorksheet=Add new worksheet

ACTIVITYMENUAddNewWorksheet=Add new worksheet

ACTIVITYDESCAddanewExcelWorksheettotheactiveWorkbook.=Add a new Excel worksheet to the active workbook.

ACTIVITYNAMEAddNewWorksheet=Add new worksheet

ACTIVITYCATEGORYWorksheet=Worksheet

ACTIVITYTITLECloseExcelFile=Close Excel file

ACTIVITYMENUCloseExcelFile=Close Excel file.

ACTIVITYNAMECloseExcelFile=Close Excel file

ACTIVITYTITLECreatenewExcelFile=Create Excel file.

ACTIVITYMENUCreatenewExcelFile=Create Excel file.

ACTIVITYDESCCreatenewExcelFile.=Create Excel file.

ACTIVITYNAMECreatenewExcelFile=Create Excel file

ACTIVITYTITLECreatenewExcelWorkbook=Create Excel workbook

ACTIVITYMENUCreatenewExcelWorkbook=Create Excel workbook

ACTIVITYDESCCreatenewExcelWorkbook.=Create Excel workbook

ACTIVITYNAMECreatenewExcelWorkbook=Create Excel workbook

ACTIVITYCATEGORYWorkbook=Workbook

ACTIVITYTITLEGetonevalue=Get one value

ACTIVITYMENUGetonevalue=Get one value

ACTIVITYDESCGetonevaluefromacell=Get one value from a cell

ACTIVITYNAMEGetonevalue=Get one value

ACTIVITYCATEGORYData=Data

ACTIVITYTITLEUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

ACTIVITYMENUUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

ACTIVITYDESCUseaspecificWorkbookalreadyopen.=Use a specific workbook that's already open.

ACTIVITYNAMEUseaspecificWorkbook(alreadyopened)=Use a specific workbook (already opened)

ACTIVITYTITLEActivateWorksheet=Activate worksheet

ACTIVITYMENUActivateWorksheet=Activate worksheet

ACTIVITYDESCActivateanExcelWorksheetfromtheactiveWorkbook.=Activate an Excel worksheet from the active workbook.

ACTIVITYNAMEActivateWorksheet=Activate worksheet

ACTIVITYCATEGORYFormulas=Formulas

ACTIVITYTITLEGetValues=Get values

ACTIVITYMENUGetValues=Get values

ACTIVITYDESCGetvaluesfromrangeontheactiveworksheet.=Get values from range on the active worksheet.

ACTIVITYNAMEGetValues=Get values

ACTIVITYTITLEInitializeExcel=Initialize Excel

ACTIVITYMENUInitializeExcel=Initialize Excel

ACTIVITYDESCInitializesExcelLibrarywithdifferentmodes.=Initializes Excel Library with different modes.

ACTIVITYNAMEInitializeExcel=Initialize Excel

ACTIVITYTITLEOpenExistingExcelFile=Open existing Excel file

ACTIVITYMENUOpenExistingExcelFile=Open existing Excel file.

ACTIVITYDESCOpenExistingExcelFile.=Open existing Excel file.

ACTIVITYNAMEOpenExistingExcelFile=Open existing Excel file

PROPDESCACTIVITYTheexcelfullfilename.Ex.'C\\myFolder1\\myFolder2\\myWorkbook.xlsx'=The full Excel filename, such as  'C:\\myFolder1\\myFolder2\\myWorkbook.xlsx'

ACTIVITYTITLEReleaseExcel=Release Excel

ACTIVITYMENUReleaseExcel=Release Excel

ACTIVITYNAMESaveAsExcel=Save as Excel.

PROPDESCACTIVITYTheexcelfullfilename.Ex.'C\\Folder1\\Folder2\\myWorkbook.xlsx'=The full Excel filename, such as 'C:\\Folder1\\Folder2\\myWorkbook.xlsx'

ACTIVITYTITLESaveExcelFile=Save Excel file

ACTIVITYMENUSaveExcelFile=Save Excel file

ACTIVITYNAMESaveExcelFile=Save Excel file

ACTIVITYTITLESetonevalue=Set one value

ACTIVITYMENUSetonevalue=Set one value

ACTIVITYDESCSetonevalueinacell=Set one value in a cell

ACTIVITYNAMESetonevalue=Set one value

ACTIVITYTITLESetvalues=Set values.

ACTIVITYMENUSetvalues=Set values

ACTIVITYDESCSetvaluesinarange.=Set values in a range.

ACTIVITYNAMESetvalues=Set values

PROPDESCACTIVITYIftrue,addthekeysasHeaderofthetable.=If true, add the keys as table headers.

ACTIVITYTITLEGetAllText$item$=Get all text $item$

ACTIVITYMENUGetAllText$item$=Get all text $item$

ACTIVITYDESCGetentiredataastextofthefeedcontent=Get entire data as text of the feed content

ACTIVITYNAMEGetAltText=Get alt text

ACTIVITYTITLEGetSubheader$item$=Get subheader $item$.

ACTIVITYMENUGetSubheader$item$=Get subheader $item$

ACTIVITYDESCGetsubheaderofthefeedcontentcontrol=Get subheader of the feed content control

ACTIVITYNAMEGetSubheader=Get subheader

ACTIVITYNAMESearch=Search

ACTIVITYCATEGORYSearchField=Search field

ACTIVITYTITLESetContent$item$=Set content $item$.

ACTIVITYMENUSetContent$item$=Set content $item$

ACTIVITYDESCSetContentinthefeedcontentcontrol=Set content in the feed content control

ACTIVITYNAMESetContentText=Set content txt

PROPNAMEACTIVITYEnterContentText=Enter content text

ACTIVITYTITLESetsubheader$item$=Set subheader $item$.

ACTIVITYMENUSetsubheader$item$=Set subheader $item$

ACTIVITYDESCSetSubheaderinthefeedcontent=Set subheader in the feed content

ACTIVITYNAMESetSubheader=Set subheader

PROPNAMEACTIVITYEnterSubheader=Enter subheader

ACTIVITYTITLESetNeumericdata$item$=Set numeric data $item$.

ACTIVITYMENUSetNeumericdata$item$=Set numeric data $item$

ACTIVITYDESCSetneumericdatainfeedcontent=Set numeric data in feed content

PROPNAMEACTIVITYSetNumericValue=Set numeric value

ACTIVITYTITLEReleaseOutlook=Release Outlook.

ACTIVITYMENUReleaseOutlook=Release Outlook

ACTIVITYDESCReleaseOutlook.=Release Outlook.

ACTIVITYNAMEReleaseOutlook=Release Outlook

ACTIVITYTITLEGetNumericdata$item$=Get numeric data $item$.

ACTIVITYMENUGetNumericdata$item$=Get numeric data $item$

ACTIVITYDESCGetnumericdatafromfeedcontent=Get numeric data from feed content

ACTIVITYNAMEGetNumeric=Get numeric

ACTIVITYTITLESetNumericdata$item$=Set numeric data $item$.

ACTIVITYMENUSetNumericdata$item$=Set numeric data $item$

ACTIVITYDESCSetnumericdatainfeedcontent=Set numeric data in feed content

ACTIVITYNAMESetNumeric=Set numeric

ACTIVITYTITLEClearallselectedrowin$item$=Clear all selected row in $item$.

ACTIVITYMENUClearallselectedrowin$item$=Clear all selected row in $item$

ACTIVITYDESCClearallselectedrowsinGUICtrlGridView=Clear all selected rows in GUICtrlGridView

ACTIVITYNAMEDeselectAllRows=Deselect all rows

PROPDESCACTIVITYNameoftheItemtouseforthisaction.=Name of the item to use for this action.

PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(ExvarmyValue')-...=This is an 'expression'. Use $data$ to get data from the context (example: $data$ + '+++') '...' to set a constant value (example: 'myValue') ...

PROPNAMEACTIVITYWheretostoreResult.=Where to store result

PROPDESCACTIVITYThisisan'expression'.Use--$data$togetdatafromtheContext(Ex$data$+'+++')-'...'tosetaconstantvalue(ExvarmyValue)-...=This is an 'expression'. Use $data$ to get data from the Context (Ex: $data$ + '+++') '...' to set a constant value (Ex: var myValue) ...

ACTIVITYTITLESelectallrowsin$item$=Select all rows in $item$.

ACTIVITYMENUSelectallrowsin$item$=Select all rows in $item$

ACTIVITYDESCSelecttheGUICtrlGridViewRows=Select the GUICtrlGridView rows

ACTIVITYNAMESelectAllRows=Select all rows

PROPDESCACTIVITYUsethisparameteronlyincaseofColumnTree.-Thisparameterisignoredfortreetypesotherthancolumntree.-Sinceparameterscannotbeemptyinanactivity,0isthedefaultparameter.-=Use this parameter only in case of Column Tree. This parameter is ignored for tree types other than column tree. Since parameters cannot be empty in an activity, 0 is the default parameter. 

ACTIVITYTITLEClickthebuttoninGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$.

ACTIVITYMENUClickthebuttoninGUICtrlGridViewCellofrow$expression$andcol$col$in$item$=Click the button in GUICtrlGridView Cell of row $expression$ and col $col$ in $item$

ACTIVITYDESCClickthebuttoninGUICtrlGridViewCell=Click the button in GUICtrlGridView cell

ACTIVITYNAMEClickButtonCell=Click button cell

ACTIVITYTITLEScrolltonextpagein$item$=Scroll to next page in $item$.

ACTIVITYMENUScrolltonextpagein$item$=Scroll to next page in $item$

ACTIVITYDESCScrolltonextpageinGuiUserArea=Scroll to next page in GuiUserArea

ACTIVITYCATEGORYGuiUserArea=GuiUserArea

ACTIVITYTITLEScrolltopreviouspagein$item$=Scroll to previous page in $item$.

ACTIVITYMENUScrolltopreviouspagein$item$=Scroll to previous page in $item$

ACTIVITYDESCScrolltopreviouspageinGuiUserArea=Scroll to previous page in GuiUserArea


ACTIVITYTITLECreatefilter=Create filter.

ACTIVITYMENUCreatefilter=Create filter

ACTIVITYDESCLimitotheractionstopagerangesorcertainareasofaPDF=Limit other actions to page ranges or certain areas of a PDF

ACTIVITYNAMECreatefilterfortextextraction=Create filter for text extraction

ACTIVITYCATEGORYPDF=PDF

PROPNAMEACTIVITYPageRange=Page Range

PROPDESCACTIVITYThePageRangerelevantforextractingspecificwordtokens.Example"1,3,7-9"=The Page Range relevant for extracting specific word tokens. Example: "1,3,7-9"

PROPNAMEACTIVITYTopOffset=Top offset

PROPDESCACTIVITYDistanceofboundingboxfromtopsideofPDF.=Distance of bounding box from top side of PDF.

PROPNAMEACTIVITYLeftOffset=Left offset

PROPDESCACTIVITYDistanceofboundingboxfromleftsideofPDF.=Distance of bounding box from left side of PDF.

PROPNAMEACTIVITYWidth=Width

PROPDESCACTIVITYWidthoftheboundingboxtoextracttextfrom.=Width of the bounding box to extract text from.

PROPNAMEACTIVITYHeight=Height

PROPDESCACTIVITYHeightoftheboundingboxtoextracttextfrom.=Height of the bounding box to extract text from.

PROPDESCACTIVITYNameofthevariablefromthedatacontexttouseforthisaction.=Name of the variable from the data context to use for this action.

ACTIVITYTITLEExtracttext=Extract text.

ACTIVITYMENUExtracttext=Extract text

ACTIVITYDESCExtracttextwithRegex=Extract text with Regex.

ACTIVITYNAMEExtracttextwithRegex=Extract text with Regex

PROPNAMEACTIVITYRegularExpression=Regular Expression

PROPDESCACTIVITYDeclarationoftheregularexpressiontoextractrelevanttext.Ifyourtextcontainssomethinglike"InvoiceNrBS00722"andyouwanttoextracttheinvoicenumberyourregexshouldbe/InvoiceNr([A-Z0-9]+)/=Declaration of the regular expression to extract relevant text. If your text contains something like "Invoice Nr: BS00722" and you want to extract the invoice number your regex should be /Invoice Nr: ([A-Z0-9]+)/

PROPNAMEACTIVITYFilter=Filter

PROPDESCACTIVITYTofiltertheresult,provideafilterobjectcreatedwiththe'CreateFilter'actionorctx.pdf.createFilter(..).=To filter the result, provide a filter object created with the 'Create Filter' action or ctx.pdf.createFilter(..).

ACTIVITYTITLEGetnumberofpages=Get number of pages.

ACTIVITYMENUGetnumberofpages=Get number of pages

ACTIVITYDESCGetsthetotalnumberofpagesinthePDF=Gets the total number of pages in the PDF

ACTIVITYNAMEGetnumberofpages=Get number of pages

ACTIVITYTITLEGettext=Get text.

ACTIVITYMENUGettext=Get text

ACTIVITYDESCGettext=Get text

ACTIVITYNAMEGettext=Get text

ACTIVITYTITLEGetpagedimensions=Get page dimensions.

ACTIVITYMENUGetpagedimensions=Get page dimensions

ACTIVITYDESCGetdimensionsofagivenpageinthePDF=Get dimensions of a given page in the PDF

ACTIVITYNAMEGetpagedimensions=Get page dimensions

PROPNAMEACTIVITYPDFpagenumber=PDF page number

PROPDESCACTIVITYThepagenumberfortheViewport=The page number for the Viewport

ACTIVITYTITLEOpenPDF=Open PDF

ACTIVITYMENUOpenPDF=Open PDF

ACTIVITYDESCOpenaPDF=Open a PDF

ACTIVITYNAMEOpenPDF=Open PDF

PROPNAMEACTIVITYPDFfilename=PDF filename

PROPDESCACTIVITYThefullqualifiedPDFfilename.Ex.'C\\MyFolder\\Invoice.pdf'.Canbeanexpressionorstring.=The full qualified PDF filename. Ex. 'C:\\MyFolder\\Invoice.pdf'. Can be an expression or a string.

PROPNAMEACTIVITYPassword=Password

PROPDESCACTIVITYProvideapasswordforprotecedPDFfiles.=Provide a password for proteced PDF files.

ACTIVITYTITLEReleasePDF=Release PDF.

ACTIVITYMENUReleasePDF=Release PDF

ACTIVITYDESCClosePDFandreleaseresources.=Close PDF and release resources.

ACTIVITYNAMEReleasePDF=Release PDF

ACTIVITYTITLEStartrefreshonpolling=Start refresh on polling

ACTIVITYMENUStartrefreshonpolling=Start refresh on polling

ACTIVITYDESCstartspollingprocessonsapgui.=Starts polling process on SAP GUI.

ACTIVITYNAMEStartRefreshOnPolling=StartRefreshOnPolling

PROPDESCACTIVITYNameofthepageonwhichthisactioniscalled=Name of the page on which this action is called

ACTIVITYTITLEStoprefreshonpolling=Stop refresh on polling

ACTIVITYMENUStoprefreshonpolling=Stop refresh on polling

ACTIVITYDESCstopspollingprocessonsapgui.=Stops polling process on SAP GUI.

ACTIVITYNAMEStopRefreshOnPolling=StopRefreshOnPolling

PROPNAMEACTIVITYVariableforusername=Variable for username

PROPDESCACTIVITYNameofthevariableofcontexttousefortheusername.=Name of the context variable to use for the username.

PROPNAMEACTIVITYVariableforpassword=Variable for password

PROPDESCACTIVITYNameofthevariableofcontexttouseforthepassword.=Name of the context variable to use for the password.

ACTIVITYTITLEGetsselectedkeyin$item$=Get selected key in $item$

ACTIVITYMENUGetsselectedkeyin$item$=Get selected key in $item$

ACTIVITYDESCReturnstheselectedkeyinComboBox.=Return the selected key in ComboBox.

ACTIVITYNAMEGetKey=Get key

ACTIVITYCATEGORYGuiComboBox=GuiComboBox

ACTIVITYTITLEGetsentriesin$item$=Get entries in $item$

ACTIVITYMENUGetsentriesin$item$=Get entries in $item$

ACTIVITYDESCReturnstheentriesinComboBox.=Return the entries in ComboBox.

ACTIVITYNAMEGetList=Get list

ACTIVITYTITLEGetsselectedvaluein$item$=Gets selected value in $item$

ACTIVITYMENUGetsselectedvaluein$item$=Gets selected value in $item$

ACTIVITYDESCReturnstheselectedvalueinComboBox.=Return the selected value in ComboBox.

ACTIVITYNAMEGetValue=Get value

ACTIVITYTITLESetsthekeyin$item$=Set the key in $item$

ACTIVITYMENUSetsthekeyin$item$=Set the key in $item$

ACTIVITYDESCSetsthekeyasselectediteminComboBox.=Set the key as selected item in ComboBox.

ACTIVITYNAMESetKey=Set key

PROPNAMEACTIVITYKey=Key

PROPDESCACTIVITYEnterthekey.=Enter the key.

ACTIVITYTITLESetsthevaluein$item$=Set the value in $item$

ACTIVITYMENUSetsthevaluein$item$=Set the value in $item$

ACTIVITYDESCSetsthevalueasselectediteminComboBox.=Set the value as selected item in ComboBox.

ACTIVITYNAMESetValue=Set value

PROPDESCACTIVITYEnterthevalue.=Enter the value.

ACTIVITYTITLECheckEnabledin$item$=Check enabled in $item$

ACTIVITYMENUCheckEnabledin$item$=Check enabled in $item$

ACTIVITYDESCCheckEnabled=Check enabled

ACTIVITYNAMECheckEnabled=Check enabled

PROPDESCACTIVITYYoucan-Thisisan'expression'.Use-Useaconstantbyusing...(exvarx)-Useavariablevaluebyusing'...'(ex$data$+'+++')=This is an 'expression'.\n- For a constant, use _..._ (example: var x )\n- For a variable value, use'...' (example: $data$ + '+++')

ACTIVITYDESCSetValue=Set value

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantbyusing...(ex"toto"})-Useavariablevaluebyusing'...'(ex$data$+'+++')=Select or create an entry in the context\n- For a constant, use _..._ (example: "toto"})\n- For a variable value, use '...' (example: $data$ + '+++')

ACTIVITYTITLERemoveAllTokenin$item$=Remove all tokens in $item$

ACTIVITYMENURemoveAllTokenin$item$=Remove all tokens in $item$

ACTIVITYDESCRemoveAllToken=Remove all tokens

ACTIVITYNAMERemoveAllToken=Remove all tokens

ACTIVITYCATEGORYMultiInput=MultiInput

ACTIVITYTITLERemove$data$in$item$=Remove $data$ in $item$

ACTIVITYMENURemove$data$in$item$=Remove $data$ in $item$

ACTIVITYDESCRemoveItem=Remove item

ACTIVITYNAMERemoveItem=Remove item

PROPDESCACTIVITYYoucan-Selectorcreateanentryinthecontext-Useaconstantbyusing...(ex"Token1"})-Useavariablevaluebyusing'...'(ex$data$+'+++')=Select or create an entry in the context\n- For a constant, use _..._ (example: "Token 1"})\n- For a variable value, use '...' (example: $data$ + '+++')

PROPNAMEACTIVITYExpression=Expression

ACTIVITYTITLESelectContextMenuItemwithID$ID$ofaselectedCell/Rowin$item$=Select Context Menu Item with ID $ID$ of a selected Cell/Row in $item$

ACTIVITYMENUSelectContextMenuItemwithID$ID$ofaselectedCell/Rowin$item$=Select Context Menu Item with ID $ID$ of a selected Cell/Row in $item$

ACTIVITYDESCSelectcontextmenuitemofaselectedcell/RowinGridViewbyID=Select context menu item of a selected cell/Row in Grid View by ID

ACTIVITYNAMESelectContextMenuItembyID=Select Context Menu Item by ID

PROPNAMEACTIVITYMenuItemID=MenuItem ID

PROPDESCACTIVITYIDofamenuitemcanbefetchedbyusing'RecordingandPlayback'optioninSAPGUIApplication.-RecordonlythestepofselectingtherequiredmenuitemfromtheContextMenu.-ThegeneratedVBSscriptwillhavea'selectContextMenuItem'callwiththeIDnexttoit.-=You can fetch the ID of a menu item by using the 'Recording and Playback' option in SAPGUI Application.\n- Record only the step of selecting the required menu item from the Context Menu.\n- The generated VBS script will have a 'selectContextMenuItem' call with the ID next to it.\n- 

ACTIVITYTITLESelectContextMenuIteminPosition$position$ofaselectedCell/Rowin$item$=Select Context Menu Item in Position $position$ of a selected Cell/Row in $item$

ACTIVITYMENUSelectContextMenuIteminPosition$position$ofaselectedCell/Rowin$item$=Select Context Menu Item in Position $position$ of a selected Cell/Row in $item$

ACTIVITYDESCSelectcontextmenuitemofaselectedcell/RowinGridViewbyPosition=Select context menu item of a selected cell/Row in Grid View by Position

PROPDESCACTIVITYIfthereareSEPERATORlinesinthemiddleoftheContextMenulist,itmustbecountedtogettheaccuratepositionoftherequiredmenuitem.-IftheSEPARATORisignoredwhilecounting,themenuitemselectionwillbeincorrectorfailtowork.-PositionofthefirstitemintheCon=If there are SEPERATOR lines in the middle of the Context Menu list, it must be counted to get the accurate position of the required menu item.\n- If the SEPARATOR is ignored while counting, the menu item selection will be incorrect or fail to work.\n- Position of the first item in the Context Menu is always 0.\n- 

ACTIVITYTITLESelectContextMenuItemwithText$text$ofaselectedCell/Rowin$item$=Select Context Menu Item with Text $text$ of a selected Cell/Row in $item$

ACTIVITYMENUSelectContextMenuItemwithText$text$ofaselectedCell/Rowin$item$=Select Context Menu Item with Text $text$ of a selected Cell/Row in $item$

ACTIVITYDESCSelectcontextmenuitemofaselectedcell/RowinGridViewbyText=Select context menu item of a selected cell/Row in Grid View by Text

PROPDESCACTIVITYTextisCASESENSITIVE...-=Text is CASE SENSITIVE...\n- 

ACTIVITYTITLESelectContextMenuItemwithID$ID$ofnode$nodeKey$in$item$=Select Context Menu Item with ID $ID$ of node $nodeKey$ in $item$

ACTIVITYMENUSelectContextMenuItemwithID$ID$ofnode$nodeKey$in$item$=Select Context Menu Item with ID $ID$ of node $nodeKey$ in $item$

ACTIVITYDESCSelectcontextmenuitemofanodebyID=Select context menu item of a node by ID

PROPDESCACTIVITYUsethisparameteronlyincaseofColumnTreesinceothertreetypesdonothavemultiplecolumns.-Thisparameterisignoredfortreetypesotherthancolumntree.-Sinceparameterscannotbeemptyinanactivity,0isthedefaultparameter.-=Use this parameter in case of Column Tree only since other tree types do not have multiple columns.\n- This parameter is ignored for tree types other than column tree.\n- Since parameters cannot be empty in an activity, 0 is the default parameter.\n- 

ACTIVITYTITLEUnlock=Unlock

ACTIVITYMENUUnlock=Unlock

ACTIVITYDESCUnlockstheworkstation.Nouserinterventionisrequired.=Unlock the workstation. No user intervention is required.

ACTIVITYNAMEUnlock=Unlock
